---

- name: Compute non-root role accounts
  ansible.builtin.set_fact:
    non_root_role_accounts: >-
      {{ ssh_users
         | map(attribute='roles')
         | flatten
         | reject('equalto', 'root')
         | unique
         | list }}
  delegate_to: "{{ target_host | default(omit) }}"

- name: Get passwd database on target
  ansible.builtin.getent:
    database: passwd
  register: getent_passwd_result
  delegate_to: "{{ target_host | default(omit) }}"

- name: Compute existing non-root role accounts
  ansible.builtin.set_fact:
    existing_role_accounts: >-
      {{ non_root_role_accounts
         | intersect((getent_passwd_result.ansible_facts.getent_passwd | default({})).keys() | list) }}
  delegate_to: "{{ target_host | default(omit) }}"

- name: Ensure .ssh directory exists
  become: true
  ansible.builtin.file:
    path: "/home/{{ item }}/.ssh"
    state: directory
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: '0700'
  loop: "{{ existing_role_accounts }}"
  delegate_to: "{{ target_host | default(omit) }}"

- name: Initialize user_keys_map with non-https keys for each existing account
  ansible.builtin.set_fact:
    user_keys_map: >-
      {{ user_keys_map | default({}) | combine({
          item: (
            ssh_users
            | selectattr('roles','contains', item)
            | map(attribute='key')
            | flatten
            | reject('match','^https?://')
            | list
          )
      }) }}
  loop: "{{ existing_role_accounts }}"
  delegate_to: "{{ target_host | default(omit) }}"

- name: Fetch and append keys from https:// URLs per user
  include_tasks: fetch_user_keys_from_urls.yml
  loop: "{{ existing_role_accounts }}"
  loop_control:
    loop_var: user_account
  vars:
    user_url_list: >-
      {{ ssh_users
         | selectattr('roles','contains', user_account)
         | map(attribute='key')
         | flatten
         | select('match','^https?://')
         | list }}
  when: user_url_list | length > 0

- name: Deduplicate keys and write authorized_keys for each user
  become: true
  vars:
    keys_for_user: "{{ (user_keys_map[item] | default([])) | map('trim') | reject('equalto','') | unique | list }}"
  ansible.builtin.copy:
    dest: "/home/{{ item }}/.ssh/authorized_keys"
    content: "{{ keys_for_user | join('\n') + (keys_for_user | length > 0 and '\n' or '') }}"
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: '0600'
  loop: "{{ existing_role_accounts }}"
  delegate_to: "{{ target_host | default(omit) }}"
