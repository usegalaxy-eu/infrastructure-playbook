---
codename: key

# packages
software_groups_to_install:
  - admin
  - debug
  - editors
  - pdf_export_deps
  - services
  - terminals
  - utils

# Docker
docker_users:
  - galaxy

# Autofs
autofs_service.install: true
autofs_service.enable: true
nfs_kernel_tuning: true

autofs_mount_points:
  - data
  - usrlocal

autofs_conf_files:
  data:
    - 0       -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/depot/&
    - 1       -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/depot/&
    - 2       -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/depot/&
    - 3       -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/depot/&
    - 4       -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/depot/&
    - 5       -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/depot/&
    - 6       -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/depot/&
    - 7       -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/depot/&
    - dp01    -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dataplant01
    - dnb01   -rw,hard,nosuid      ufr-dyn.isi1.public.ads.uni-freiburg.de:/ifs/isi1/ufr/bronze/nfs/denbi/&
    - dnb02   -rw,hard,nosuid      ufr-dyn.isi1.public.ads.uni-freiburg.de:/ifs/isi1/ufr/bronze/nfs/denbi/&
    - dnb03   -rw,hard,nosuid      ufr-dyn.isi1.public.ads.uni-freiburg.de:/ifs/isi1/ufr/bronze/nfs/denbi/&
    - dnb04   -rw,hard,nosuid      ufr-dyn.isi1.public.ads.uni-freiburg.de:/ifs/isi1/ufr/bronze/nfs/denbi/&
    - dnb05   -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/&
    - dnb06   -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb06
    - dnb07   -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb07
    - dnb08   -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb08
    - db      -rw,hard,nosuid      ufr-dyn.isi1.public.ads.uni-freiburg.de:/ifs/isi1/ufr/bronze/nfs/denbi/&
    - gxtst   -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/ws01/galaxy-sync/test
    - gxkey   -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/ws01/galaxy-sync/main
    - jwd     -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/ws01/&
    - jwd01   -rw,hard,nosuid      zfs1.galaxyproject.eu:/export/&
  discontinued:
    - 0       -rw,hard,nosuid      sn01.bi.uni-freiburg.de:/export/data3/galaxy/net/data/&
    - 1       -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/data/&
    - 2       -rw,hard,nosuid      sn01.bi.uni-freiburg.de:/export/data4/galaxy/net/data/&
    - 3       -rw,hard,nosuid      sn01.bi.uni-freiburg.de:/export/data5/galaxy/net/data/&
    - 4       -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/data/&
    - 5       -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/data/&
    - 6       -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/data/&
    - 7       -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/data/&
    - db      -rw,hard,nosuid      sn02.bi.uni-freiburg.de:/export/fdata1/galaxy/net/data/db
    - gxmnt   -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/system/galaxy
    - gxnew   -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/system/galaxy-i1
    - gxtst   -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/system/galaxy-i2
    - gxkey   -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/system/galaxy-i3
    - tools   -rw,hard,nosuid      sn03.bi.uni-freiburg.de:/export/galaxy1/system/tools
  usrlocal:
    - /usr/local/tools   -rw,hard,nosuid,nconnect=2      denbi.svm.bwsfs.uni-freiburg.de:/dnb01/tools

# fs-maintenance
fsm_maintenance_dir: "/data/dnb01/maintenance"

fsm_scripts:
  temporary_dirs:
    enable: true
    src: "temporary_dirs.sh.j2"
    dst: "{{ fsm_maintenance_dir }}/temporary_dirs.sh"
    user: "{{ fsm_galaxy_user.username }}"
    group: "{{ fsm_galaxy_user.groupname }}"
    paths:
      - /data/2/galaxy_db/tmp
      - /data/dnb01/galaxy_db/tmp
      - /data/dnb02/galaxy_db/tmp
      - /data/dnb03/galaxy_db/tmp
      - /data/jwd/tmp
    time: "{{ fsm_intervals.long }}"
  upload_dirs:
    enable: true
    src: "uploads.sh.j2"
    dst: "{{ fsm_maintenance_dir }}/uploads.sh"
    user: "{{ fsm_galaxy_user.username }}"
    group: "{{ fsm_galaxy_user.groupname }}"
    paths:
      - "{{ galaxy_config['galaxy']['nginx_upload_store'] }}"
      - "{{ galaxy_config['galaxy']['nginx_upload_job_files_store'] }}"
    time: "{{ fsm_intervals.medium }}"
  job_working_dirs:
    enable: true
    src: "job_working_dir.sh.j2"
    dst: "{{ fsm_maintenance_dir }}/job_working_dir.sh"
    user: "{{ fsm_galaxy_user.username }}"
    group: "{{ fsm_galaxy_user.groupname }}"
    paths:
      - "{{ galaxy_config['galaxy']['job_working_directory'] }}"
      - /data/dnb03/galaxy_db/job_working_directory
      - /data/jwd/main
    time: "{{ fsm_intervals.long }}"

fsm_cron_tasks:
  docker:
    enable: true
    name: "Docker clean up"
    minute: 30
    hour: 2
    dom: "*"
    month: "*"
    dow: "*"
    job: ". {{ galaxy_root }}/.bashrc && docker system prune -f > /dev/null"
    user: "{{ fsm_galaxy_user.username }}"
  gxadmin:
    enable: true
    name: "Gxadmin Galaxy clean up"
    minute: 0
    hour: "*/6"
    dom: "*"
    month: "*"
    dow: "*"
    job: "{{ custom_telegraf_env }} /usr/bin/gxadmin galaxy cleanup 60"
    user: "{{ fsm_galaxy_user.username }}"

fsm_htcondor_enable: true

# TIaaS
tiaas_virtualenv_python: "python3.8"

# Telegraf
telegraf_agent_hostname: "{{ hostname }}"
telegraf_agent_version: 1.17.2
custom_telegraf_env: "/usr/bin/env GDPR_MODE=1 PGUSER={{ galaxy_user.name }} PGHOST={{ postgres_host }} GALAXY_ROOT={{ galaxy_server_dir }} GALAXY_CONFIG_FILE={{ galaxy_config_file }} GALAXY_LOG_DIR={{ galaxy_log_dir }} GXADMIN_PYTHON={{ galaxy_venv_dir }}/bin/python"
telegraf_plugins_extra:
  postgres:
    plugin: "postgresql"
    config:
      - address = "{{ galaxy_db_connection }}"
      - databases = ["galaxy", "galaxy-test", "apollo", "chado"]

  listen_galaxy_routes:
    plugin: "statsd"
    config:
      - service_address = ":8125"
      - percentiles = [90]
      - metric_separator = "."
      - allowed_pending_messages = 10000
      - percentile_limit = 100

  #monitor_condor_queue_split:
  #plugin: "exec"
  #config:
  ## TODO: sudoers rule?
  #- commands = ["sudo /usr/bin/monitor-condor-queue-split"]
  #- timeout = "10s"
  #- data_format = "influx"
  #- interval = "15s"

  monitor_condor_queue:
    plugin: "exec"
    config:
      - commands = ["sudo /usr/bin/monitor-condor-queue"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "1m"

  monitor_condor_util:
    plugin: "exec"
    config:
      - commands = ["sudo /usr/bin/monitor-condor-utilisation"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "1m"

  monitor_nfsstat:
    plugin: "exec"
    config:
      - commands = ["/usr/bin/nfsstat-influx"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "15s"

  # Some custom galaxy monitoring stuff
  galaxy_uploaded:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery upload-gb-in-past-hour"]
      - timeout = "120s"
      - data_format = "influx"
      - interval = "1h"
  galaxy_lastlog:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin uwsgi lastlog"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "15s"
  galaxy_jobs_queued:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery jobs-queued"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_jobs_queued_internal:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery jobs-queued-internal-by-handler"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_jobs_queue_overview:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery queue-overview --short-tool-id"]
      - timeout = "30s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_oidc:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery users-with-oidc"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_workflow:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery workflow-invocation-status"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_workflow_totals:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery workflow-invocation-totals"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_active_users:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin uwsgi active-users"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"

  postgres_extra:
    plugin: "exec"
    config:
      - commands = [
        "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-cache-hit",
        "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-index-size",
        "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-index-usage",
        "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-table-bloat",
        "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-table-size",
        "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-unused-indexes",
        "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-vacuum-stats",
        "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-stat-bgwriter",
        "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-stat-user-tables",
        ]
      - timeout = "60s"
      - data_format = "influx"
      - interval = "2m"

# Custom pip installer
pip_venv_path: "{{ galaxy_venv_dir }}"
pip_install_dependencies:
  # phdcomics
  - beautifulsoup4
  # Used by code_files for apollo
  - biopython
  - bcbio-gff
  # Needed for tool watching
  - watchdog
  # Needed gxadmin graphs
  - data_hacks
  # used by reports
  - WeasyPrint
  - total_perspective_vortex

yum_exclude_repos:
  - condor*
  - npm*

all_yum_repositories:
  - name: galaxy_gpel
    description: Galaxy Packages for Enterprise Linux $releasever - $basearch
    baseurl: https://depot.galaxyproject.org/yum/el/$releasever/$basearch/
    enabled: true
    gpgcheck: false
    retries: 1
    timeout: 10

# Galaxy monitoring
monitor_condor: true
monitor_condor_split_util: true

# Certbot
certbot_virtualenv_package_name: python3-virtualenv
certbot_dns_provider: route53
certbot_auth_method: --standalone
certbot_domains: "{{ server_names }}"
certbot_post_renewal: |
  systemctl restart nginx || true
certbot_share_key_users:
  - nginx

# AWS Credentials for certbot-route53
aws_cli_credentials:
  - access_key: "{{ aws_credentials.certbot.AWS_ACCESS_KEY }}"
    secret_key: "{{ aws_credentials.certbot.AWS_SECRET_KEY }}"
    homedir: /root
    owner: root
    group: root

# rsync to nfs
galaxy_nfs_location: /data/gxkey

# Nginx
nginx_servers:
  - redirect-ssl
nginx_ssl_servers:
  - galaxyproject
  - telescope-ssl
  - galaxy-main
  - galaxy-ie-main
  - galaxy-test-proxy
nginx_conf_http:
  client_max_body_size: 1g
  proxy_cache_path: "/tmp/nginx-cache levels=1:2 keys_zone=STATIC:10m inactive=24h  max_size=1g"
  gzip: "on"
  gzip_proxied: any
  # The ngx_http_gzip_static_module module allows sending precompressed files with the “.gz” filename extension instead of regular files.
  gzip_static: "on"
  gzip_http_version: "1.1"
  gzip_disable: '"MSIE [1-6]\."'
  gzip_vary: "on"
  gzip_comp_level: 6
  gzip_types: |
    text/plain
    text/css
    text/xml
    text/javascript
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/xml+rss
    application/xhtml+xml
    application/x-font-ttf
    application/x-font-opentype
    image/png
    image/svg+xml
    image/x-icon
  gzip_buffers: "16 8k"
  gzip_min_length: 128
nginx_enable_default_server: false
nginx_flavor: ""

# Nginx Letsencrypt bindings
nginx_ssl_role: usegalaxy-eu.certbot
nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-nginx.pem

# Dynmotd
dynmotd_custom:
  - name: Condor
    command: "condor_q -totals | tail -n 2"

# CVMFS
cvmfs_role: client
galaxy_cvmfs_repos_enabled: config-repo

galaxy_cvmfs_server_urls:
  - domain: galaxyproject.org
    urls:
      - "http://cvmfs1-ufr0.galaxyproject.eu/cvmfs/@fqrn@"

# SystemD
galaxy_systemd_mode: "gunicorn"
galaxy_systemd_gunicorn_workers: 4
galaxy_systemd_gunicorn_timeout: 600
galaxy_systemd_handlers: 6
galaxy_systemd_workflow_schedulers: 3

galaxy_systemd_gunicorn_env: "{{ apollo_env }}"
galaxy_systemd_handler_env: "{{ galaxy_systemd_gunicorn_env }}"
galaxy_systemd_workflow_scheduler_env: "{{ galaxy_systemd_gunicorn_env }}"

galaxy_systemd_memory_limit: 120
galaxy_systemd_memory_limit_handler: 12
galaxy_systemd_memory_limit_workflow: 15

# HTCondor
condor_host: "condor-cm.galaxyproject.eu"
condor_fs_domain: bi.uni-freiburg.de
condor_uid_domain: bi.uni-freiburg.de
condor_allow_write: "10.5.68.0/24, 132.230.223.0/24"
condor_daemons:
  - MASTER
  - SCHEDD
condor_allow_negotiator: "132.230.223.239,$(CONDOR_HOST)"
condor_allow_administrator: "$(ALLOW_NEGOTIATOR)"

condor_system_periodic_hold: "{{ 30 * 24 * 60 * 60}}"
condor_system_periodic_remove: "{{ 2 * 24 * 60 * 60}}"
condor_network_interface: ens802f0.223
condor_extra: |
  MASTER_UPDATE_INTERVAL = 150
  SCHEDD_INTERVAL = 60
  JOB_START_COUNT = 250
  JOB_START_DELAY = 0
  CLAIM_WORKLIFE = 120

# gie_proxy
gie_proxy_dir: "{{ galaxy_root }}/gie-proxy/proxy"
gie_proxy_git_version: main
gie_proxy_setup_nodejs: nodeenv
gie_proxy_virtualenv_command: /usr/bin/python3 -m virtualenv #"{{ pip_virtualenv_command }}"
gie_proxy_nodejs_version: "10.13.0"
gie_proxy_virtualenv: "{{ galaxy_root }}/gie-proxy/venv"
gie_proxy_setup_service: systemd
gie_proxy_sessions_path: "{{ galaxy_mutable_data_dir }}/interactivetools_map.sqlite"
gie_proxy_port: 8800
gie_proxy_verbose: true

# gxadmin
postgres_user: galaxy
postgres_host: sn05.galaxyproject.eu
postgres_port: 5432

# Slurp script
galaxy_slurper: galaxy
galaxy_slurp_influx_pass: "{{ influxdb.node.password }}"
galaxy_slurp_influx_user: "{{ influxdb.node.username }}"
galaxy_slurp_influx_url: "{{ influxdb.url }}"

# GRT
galaxy_grt_exporter: galaxy
galaxy_grt_uploader: galaxy

# Influx Notifier
gxadmin_influx_task_notifier: true
gxadmin_influx_task_notifier_db: notifications

# postgres_pass defined in secret_group_vars/all.yml
gxadmin_commit: main
gxadmin_dir: /opt/gxadmin
gxadmin_bin_dir: /usr/bin
gxadmin_force: true

# GALAXY
galaxy_group:
  name: galaxy
  gid: 999
galaxy_system_group: galaxy
galaxy_instance_codename: "{{ codename }}"
galaxy_log_dir: "/var/log/galaxy"
galaxy_layout: root-dir
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_build_client: false
galaxy_restart_handler_name: Restart Galaxy
galaxy_create_user: true
galaxy_user:
  name: galaxy
  create_home: true
  home: /opt/galaxy
  uid: 999
  shell: /bin/bash

# Galaxy configuration files will be written with these permissions (mode argument to Ansible copy/template module)
galaxy_config_perms: 0644

galaxy_root: /opt/galaxy
galaxy_handler_count: "{{ galaxy_systemd_handlers }}"
galaxy_workflow_scheduler_count: "{{ galaxy_systemd_workflow_schedulers }}"
galaxy_host_codename: "{{ codename }}"
galaxy_home_dir: /opt/galaxy
galaxy_mutable_config_dir: "{{ galaxy_root }}/mutable-config"
galaxy_mutable_data_dir: "{{ galaxy_root }}/mutable-data"
galaxy_shed_tools_dir: "{{ galaxy_root }}/shed_tools"
galaxy_tool_data_path: "{{ galaxy_root }}/tool-data"
__galaxy_shed_tools_dir: "{{ galaxy_shed_tools_dir }}"
galaxy_backup_configfiles: false

galaxy_server_dir: "{{ galaxy_root }}/server"
galaxy_config_dir: "{{ galaxy_root }}/config"
galaxy_venv_dir: "{{ galaxy_root }}/venv"
galaxy_job_working_directory: "{{ galaxy_config['galaxy']['job_working_directory'] }}"
ucsc_build_sites:

galaxy_virtualenv_command: "pyvenv"
#galaxy_virtualenv_python: "python3.6"
galaxy_nonrepro_tools: "{{ galaxy_root }}/custom-tools"
galaxy_nonrepro_commit: master

galaxy_dynamic_job_rules_src_dir: files/galaxy/dynamic_rules
galaxy_dynamic_job_rules_dir: "{{ galaxy_root }}/dynamic_rules"
galaxy_dynamic_job_rules:
  - usegalaxy/joint_destinations.yaml
  - usegalaxy/sorting_hat.py
  - usegalaxy/destination_specifications.yaml
  - usegalaxy/blast_destinations.py
  - usegalaxy/tool_destinations.yaml
  - usegalaxy/dexseq.py
  - usegalaxy/wig2bigwig.py
  - readme.txt

# Custom override
# Our galaxy_tool_dependency_dir is on NFS, and permissions are set in such a
# way that they cannot be changed by the ansible connected user.
galaxy_dirs:
  - "{{ galaxy_mutable_data_dir }}"
  - "{{ galaxy_mutable_config_dir }}"
  - "{{ galaxy_cache_dir }}"
  - "{{ galaxy_shed_tools_dir }}"
  #- "{{ galaxy_tool_dependency_dir }}"
  - "{{ galaxy_file_path }}"
  - "{{ galaxy_job_working_directory }}"
  - "{{ galaxy_tool_data_path }}"
  - "{{ galaxy_nonrepro_tools }}"
  - "{{ galaxy_webhook_dir }}"
  - "{{ galaxy_tour_dir }}"
  - "{{ galaxy_log_dir }}"
  - "{{ galaxy_config_dir }}/total_perspective_vortex"

galaxy_instance_hostname: usegalaxy.eu
galaxy_config_style: yaml

galaxy_repo: "https://github.com/usegalaxy-eu/galaxy.git"
galaxy_commit_id: "release_22.05_europe"
galaxy_force_checkout: true # discard any modified files
#galaxy_admin_email_from: 'noreply@usegalaxy.eu'

galaxy_singularity_images_cvmfs_path: "/cvmfs/singularity.galaxyproject.org/all/"

# Job Conf

galaxy_jobconf:
  plugin_workers: 8
  handlers:
    count: "{{ galaxy_handler_count }}"
    assign_with: db-skip-locked
    max_grab: 16
    ready_window_size: 32
  plugins:
    #- id: drmaa
    #load: galaxy.jobs.runners.drmaa:DRMAAJobRunner
    #workers: 3
    # These live on the pythonpath
    - id: dynamic
      params:
        rules_module: "usegalaxy"
    - id: condor
      load: galaxy.jobs.runners.condor:CondorJobRunner
    - id: local
      load: galaxy.jobs.runners.local:LocalJobRunner
    - id: pulsar_embedded
      load: galaxy.jobs.runners.pulsar:PulsarEmbeddedJobRunner
      pulsar_config: "{{ galaxy_config_dir }}/pulsar_app.yml"

    - id: pulsar_eu_it01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_it01:{{ rabbitmq_password_galaxy_it01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_it01?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_it02
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_it02:{{ rabbitmq_password_galaxy_it02 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_it02?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_it03
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_it03:{{ rabbitmq_password_galaxy_it03 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_it03?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_pt01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_pt01:{{ rabbitmq_password_galaxy_pt01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_pt01?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_be01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_be01:{{ rabbitmq_password_galaxy_be01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_be01?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_uk01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_uk01:{{ rabbitmq_password_galaxy_uk01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_uk01?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_fr01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_fr01:{{ rabbitmq_password_galaxy_fr01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_fr01?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_fi01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_fi01:{{ rabbitmq_password_galaxy_fi01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_fi01?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_no01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_no01:{{ rabbitmq_password_galaxy_no01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_no01?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_es01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_es01:{{ rabbitmq_password_galaxy_es01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_es01?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_cz01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_cz01:{{ rabbitmq_password_galaxy_cz01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_cz01?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: production
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
  default_destination: gateway_singlerun
  destinations:
    - id: local
      runner: local
    - id: tpv_dispatcher
      runner: dynamic
      type: python
      function: map_tool_to_destination
      rules_module: tpv.rules
      tpv_config_files:
        - "https://raw.githubusercontent.com/galaxyproject/tpv-shared-database/main/tools.yml"
        - "{{ galaxy_config_dir }}/total_perspective_vortex/destinations.yml"
        - "{{ galaxy_config_dir }}/total_perspective_vortex/default_tool.yml"
        - "{{ galaxy_config_dir }}/total_perspective_vortex/tools.yml"
        - "{{ galaxy_config_dir }}/total_perspective_vortex/interactive_tools.yml"
    - id: condor
      runner: condor
      params:
        tmp_dir: "true"
    # Gateways
    - id: gateway_singlerun
      runner: dynamic
      params:
        type: python
        function: gateway
    - id: gateway_1x
      runner: dynamic
      params:
        type: python
        function: gateway_1x
    - id: gateway_1_5x
      runner: dynamic
      params:
        type: python
        function: gateway_1_5x
    - id: gateway_2x
      runner: dynamic
      params:
        type: python
        function: gateway_2x
    - id: gateway_checkpoint
      runner: dynamic
      params:
        type: python
        function: gateway_checkpoint
    - id: gateway_for_hifiasm
      runner: dynamic
      params:
        type: python
        function: gateway_for_hifiasm
    - id: gateway_for_keras_train_eval
      runner: dynamic
      params:
        type: python
        function: gateway_for_keras_train_eval

    # Internal Pulsar runner for ITs
    - id: interactive_pulsar
      runner: pulsar_embedded
      params:
        tmp_dir: true
        docker_enabled: true
        #docker_volumes: $defaults
        docker_sudo: false
        docker_net: bridge
        docker_auto_rm: true
        docker_set_user: ""
        require_container: true
        outputs_to_working_directory: false
        container_monitor_result: callback
        submit_requirements: 'GalaxyDockerHack == True && GalaxyGroup == "interactive"'
        submit_request_memory: 4
        #submit_rank: 'GalaxyGroup == "upload"'  # submit_rank: can look like that
        docker_memory: 4

    # Internal Pulsar runner for ITs with high mem
    - id: interactive_pulsar_hi_mem
      runner: pulsar_embedded
      params:
        tmp_dir: true
        docker_enabled: true
        #docker_volumes: $defaults
        docker_sudo: false
        docker_net: bridge
        docker_auto_rm: true
        docker_set_user: ""
        require_container: true
        outputs_to_working_directory: false
        container_monitor_result: callback
        submit_requirements: 'GalaxyDockerHack == True && GalaxyGroup == "interactive"'
        submit_request_memory: 16
        submit_request_cores: 5
        #submit_rank: 'GalaxyGroup == "upload"'  # submit_rank: can look like that
        docker_memory: 4

    # Pulsar MQs
    - id: remote_cluster_mq_cz
      runner: pulsar_eu_cz
      params:
        jobs_directory: /storage/brno11-elixir/home/galaxyeu/galaxy-staging/
    - id: remote_cluster_mq_test
      runner: pulsar_eu_test
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
    - id: remote_cluster_mq_it01
      runner: pulsar_eu_it01
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
    - id: remote_cluster_mq_de01
      runner: pulsar_eu_de01
      env:
        LC_ALL: C
        SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
        singularity_enabled: "true"
        singularity_volumes: $defaults
    - id: remote_cluster_mq_de02
      runner: pulsar_eu_de02
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
    - id: remote_cluster_mq_de03
      runner: pulsar_eu_de03
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
    - id: remote_cluster_mq_docker_de03
      runner: pulsar_eu_de03
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
        docker_enabled: "true"
        docker_volumes: "$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/share/staging/:ro"
        docker_default_container_id: "ubuntu:18.04"
        docker_auto_rm: "true"
        docker_sudo: "false"
        docker_run_extra_arguments: "--gpus all"
        docker_set_user: ""
    - id: remote_cluster_mq_be01
      runner: pulsar_eu_be01
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
    - id: remote_cluster_mq_uk01
      runner: pulsar_eu_uk01
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
    - id: condor_singularity
      runner: condor
      params:
        singularity_enabled: "true"
        singularity_volumes: "$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro"
        singularity_default_container_id: "/data/0/cvmfs/singularity/ubuntu:18.04"
    - id: condor_singularity2
      runner: condor
      params:
        singularity_enabled: "true"
        singularity_volumes: "$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro"
        singularity_default_container_id: "/data/0/cvmfs/singularity/ubuntu:18.04"
        container:
          - type: singularity
            shell: /bin/sh
            resolve_dependencies: "true"
            identifier: "/data/0/cvmfs/singularity/ubuntu:18.04"
    - id: condor_singularity_with_conda
      runner: condor
      params:
        singularity_enabled: "true"
        container:
          - type: singularity
            shell: /bin/bash
            resolve_dependencies: "true"
            identifier: "/data/0/cvmfs/singularity/python:2.7.12--1"
    - id: condor_docker
      runner: condor
      params:
        docker_enabled: "true"
        docker_volumes: "$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro"
        docker_default_container_id: "ubuntu:18.04"
        docker_auto_rm: "true"
        docker_sudo: "false"
        docker_set_user: ""
    - id: condor_docker_interactive
      runner: condor
      params:
        docker_enabled: "true"
        docker_volumes: "$working_directory:rw,$job_directory:rw"
        docker_default_container_id: "ubuntu:18.04"
        docker_auto_rm: "true"
        docker_sudo: "false"
        docker_set_user: ""
    - id: condor_docker_ie
      runner: condor
      params:
        docker_enabled: "true"
        docker_volumes: "$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro"
        docker_default_container_id: "ubuntu:18.04"
        docker_auto_rm: "true"
        docker_sudo: "false"
        docker_set_user: ""
    - id: condor_docker_ie_interactive
      runner: condor
      params:
        docker_enabled: "true"
        docker_volumes: "$working_directory:rw,$job_directory:rw"
        docker_default_container_id: "ubuntu:18.04"
        docker_auto_rm: "true"
        docker_sudo: "false"
        docker_set_user: ""
    - id: condor_tpv
      runner: condor
      params:
        tmp_dir: "true"
    - id: pulsar_it_tpv
      runner: pulsar_eu_it01
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
    - id: pulsar_be_tpv
      runner: pulsar_eu_be01
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
    # TODO(hxr): check functionality
    #- id: 24cores_15G_BLAST
    #  runner: dynamic
    #  params:
    #      type: python
    #      function: blast_destinations
    #- id: wig_to_bigWig
    #  runner: dynamic
    #  params:
    #      type: python
    #      function: wig_to_bigwig
    #- id: dexseq_dynamic
    #  runner: dynamic
    #  params:
    #      type: python
    #      function: dexseq
  tools:
    # TODO(hxr): implement validation that checks that every destination
    # used here is defined above.
    - id: snippy
      destination: tpv_dispatcher
    - id: fasta-stats
      destination: tpv_dispatcher
    - id: upload1
      destination: gateway_singlerun
    - id: "toolshed.g2.bx.psu.edu/repos/chemteam/gmx_sim/gmx_sim/2020.4+galaxy0"
      destination: gateway_singlerun
      resources: usegpu
    - id: "toolshed.g2.bx.psu.edu/repos/chemteam/gmx_sim/gmx_sim/2019.1.5.1"
      destination: gateway_singlerun
      resources: usegpu
    - id: gmx_sim
      destination: gateway_singlerun
      resources: usegpu
    - id: "toolshed.g2.bx.psu.edu/repos/bgruening/hifiasm/hifiasm/0.16.1+galaxy2"
      destination: gateway_for_hifiasm
    - id: "toolshed.g2.bx.psu.edu/repos/bgruening/hifiasm/hifiasm/0.16.1+galaxy1"
      destination: gateway_for_hifiasm
    - id: keras_train_and_eval
      destination: gateway_for_keras_train_eval
      resources: usegpu
    - id: interactive_tool_openrefine
      environment: tpv_dispatcher
    - id: interactive_tool_audiolabeler
      environment: tpv_dispatcher
    - id: interactive_tool_ethercalc
      environment: tpv_dispatcher
    - id: interactive_tool_geoexplorer
      environment: tpv_dispatcher
    - id: interactive_tool_radiant
      environment: tpv_dispatcher
    - id: interactive_tool_higlass
      environment: tpv_dispatcher
    - id: interactive_tool_phinch
      environment: tpv_dispatcher
    - id: interactive_tool_neo4j
      environment: tpv_dispatcher
    - id: interactive_tool_hicbrowser
      environment: tpv_dispatcher
    - id: interactive_tool_cellxgene
      environment: tpv_dispatcher
    - id: interactive_tool_bam_iobio
      environment: tpv_dispatcher
    - id: interactive_tool_vcf_iobio
      environment: tpv_dispatcher
    - id: interactive_tool_askomics
      environment: tpv_dispatcher
    - id: interactive_tool_wilson
      environment: tpv_dispatcher
    - id: interactive_tool_wallace
      environment: tpv_dispatcher
    - id: interactive_tool_paraview
      environment: tpv_dispatcher
    - id: interactive_tool_simtext_app
      environment: tpv_dispatcher
    - id: interactive_tool_isee
      environment: tpv_dispatcher
    - id: interactive_tool_metashark
      environment: tpv_dispatcher
    - id: interactive_tool_rstudio
      environment: tpv_dispatcher
    - id: interactive_tool_pyiron
      environment: tpv_dispatcher
    - id: interactive_tool_guacamole_desktop
      environment: tpv_dispatcher
    - id: interactive_tool_panoply
      environment: tpv_dispatcher
    - id: interactive_tool_vrm_editor
      environment: tpv_dispatcher
    - id: interactive_tool_jupyter_notebook
      environment: tpv_dispatcher
    - id: interactive_tool_pangeo_notebook
      environment: tpv_dispatcher
    - id: interactive_tool_climate_notebook
      environment: tpv_dispatcher
    - id: interactive_tool_ml_jupyter_notebook
      environment: tpv_dispatcher

  resources:
    - id: usegpu
      names: [gpu]
  limits:
    - type: "walltime"
      value: "'148:00:00'"
    # Limited time for Interactive tools
    - type: "walltime"
      value: "'12:00:00'"
      id: "interactive_pulsar"
    - type: "walltime"
      value: "'12:00:00'"
      id: "interactive_pulsar_hi_mem"
    - type: "output_size"
      value: "'300GB'"
    - type: "registered_user_concurrent_jobs"
      value: "100"
    - type: "anonymous_user_concurrent_jobs"
      value: "3"
    - type: "destination_user_concurrent_jobs"
      id: "sh_fdid_condor_docker_ie"
      value: "3"
    - type: "destination_user_concurrent_jobs"
      id: "sh_fdid_condor_docker_ie_interactive"
      value: "3"
    - type: "destination_user_concurrent_jobs"
      id: "sh_fdid_condor_intensive_jobs"
      value: "10"

galaxy_config: "{{ galaxy_config_hash }}"

galaxy_config_file_src_dir: files/galaxy
galaxy_config_files:
  # TODO(bgruening): sync this with cvmfs? can we have ours be just a small additional builds.txt?
  - src: "{{ galaxy_config_file_src_dir }}/config/builds.txt"
    dest: "{{ galaxy_config['galaxy']['builds_file_path'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/data_manager_conf.xml"
    dest: "{{ galaxy_config['galaxy']['data_manager_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/datatypes_conf.xml"
    dest: "{{ galaxy_config['galaxy']['datatypes_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/dependency_resolvers_conf.xml"
    dest: "{{ galaxy_config['galaxy']['dependency_resolvers_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/email_domain_blocklist.conf"
    dest: "{{ galaxy_config['galaxy']['email_domain_blocklist_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/user_preferences_extra_conf.yml"
    dest: "{{ galaxy_config['galaxy']['user_preferences_extra_conf_path'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/job_resource_params_conf.xml"
    dest: "{{ galaxy_config['galaxy']['job_resource_params_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/trs_servers_conf.yml"
    dest: "{{ galaxy_config['galaxy']['trs_servers_config_file'] }}"
  # test? Unknown if this works.
  - src: "{{ galaxy_config_file_src_dir }}/config/error_report.yml"
    dest: "{{ galaxy_config_dir }}/error_report.yml"
  - src: "{{ galaxy_config_file_src_dir }}/config/job_metrics_conf.yml"
    dest: "{{ galaxy_config['galaxy']['job_metrics_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/migrated_tools_conf.xml"
    dest: "{{ galaxy_config['galaxy']['migrated_tools_config'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/tool_data_table_conf.xml"
    dest: "{{ galaxy_config_dir }}/tool_data_table_conf.xml"
  - src: "{{ galaxy_config_file_src_dir }}/config/tool_sheds_conf.xml"
    dest: "{{ galaxy_config['galaxy']['tool_sheds_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/ucsc_build_sites.txt"
    dest: "{{ galaxy_config['galaxy']['ucsc_build_sites'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/echo_main_env.xml"
    dest: "{{ galaxy_config_dir }}/echo_main_env.xml"
  - src: "{{ galaxy_config_file_src_dir }}/dynamic_rules/usegalaxy/total_perspective_vortex/destinations.yml"
    dest: "{{ galaxy_config_dir }}/total_perspective_vortex/destinations.yml"
  - src: "{{ galaxy_config_file_src_dir }}/dynamic_rules/usegalaxy/total_perspective_vortex/default_tool.yml"
    dest: "{{ galaxy_config_dir }}/total_perspective_vortex/default_tool.yml"
  - src: "{{ galaxy_config_file_src_dir }}/dynamic_rules/usegalaxy/total_perspective_vortex/tools.yml"
    dest: "{{ galaxy_config_dir }}/total_perspective_vortex/tools.yml"
  - src: "{{ galaxy_config_file_src_dir }}/dynamic_rules/usegalaxy/total_perspective_vortex/roles.yml"
    dest: "{{ galaxy_config_dir }}/total_perspective_vortex/roles.yml"
  - src: "{{ galaxy_config_file_src_dir }}/dynamic_rules/usegalaxy/total_perspective_vortex/interactive_tools.yml"
    dest: "{{ galaxy_config_dir }}/total_perspective_vortex/interactive_tools.yml"

  #- src: files/galaxy/config/job_resource_params_conf.xml
  #dest: "{{ galaxy_config['app:main']['job_resource_params_file'] }}"
  #- src: files/galaxy/config/pulsar_stampede_actions.yml
  #dest: "{{ galaxy_config_dir }}/pulsar_stampede_actions.yml"
  #- src: files/galaxy/config/pulsar_bridges_actions.yml
  #dest: "{{ galaxy_config_dir }}/pulsar_bridges_actions.yml"
  #- src: files/galaxy/config/pulsar_jetstream.yml
  #dest: "{{ galaxy_config_dir }}/pulsar_jetstream.yml"
  #- src: files/galaxy/config/pulsar_jetstream_actions.yml
  #dest: "{{ galaxy_config_dir }}/pulsar_jetstream_actions.yml"

galaxy_config_template_src_dir: templates/galaxy
galaxy_config_templates:
  - src: "{{ galaxy_config_template_src_dir }}/config/build_sites.yml.j2"
    dest: "{{ galaxy_config['galaxy']['build_sites_config_file'] }}"
  - src: "{{ galaxy_config_template_src_dir }}/config/global_host_filters.py.j2"
    dest: "{{ galaxy_server_dir }}/lib/galaxy/tool_util/toolbox/filters/global_host_filters.py"
  - src: "{{ galaxy_config_template_src_dir }}/config/job_conf.yml.j2"
    dest: "{{ galaxy_config_dir }}/job_conf.yml"
  - src: "{{ galaxy_config_template_src_dir }}/config/container_resolvers_conf.xml.j2"
    dest: "{{ galaxy_config_dir }}/container_resolvers_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/user_filters.py.j2"
    dest: "{{ galaxy_server_dir }}/lib/galaxy/tool_util/toolbox/filters/user_filters.py"
  - src: "{{ galaxy_config_template_src_dir }}/config/nagios_tool_conf.xml"
    dest: "{{ galaxy_config_dir }}/nagios_tool_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/oidc_backends_config.xml"
    dest: "{{ galaxy_config['galaxy']['oidc_backends_config_file'] }}"
  - src: "{{ galaxy_config_template_src_dir }}/config/oidc_config.xml"
    dest: "{{ galaxy_config['galaxy']['oidc_config_file'] }}"
  - src: "{{ galaxy_config_template_src_dir }}/config/grt.yml.j2"
    dest: "{{ galaxy_config_dir }}/grt.yml"
  - src: "{{ galaxy_config_template_src_dir }}/config/pulsar_app.yml"
    dest: "{{ galaxy_config_dir }}/pulsar_app.yml"
  - src: "{{ galaxy_config_template_src_dir }}/config/tool_conf.xml.j2"
    dest: "{{ galaxy_config_dir }}/tool_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/galaxy_workflow_scheduler.j2"
    dest: "{{ galaxy_config_dir }}/workflow_schedulers_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/file_sources_conf.yml.j2"
    dest: "{{ galaxy_config_dir }}/file_sources_conf.yml"
  - src: "{{ galaxy_config_template_src_dir }}/config/object_store_conf.xml.j2"
    dest: "{{ galaxy_config['galaxy']['object_store_config_file'] }}"
