---
codename: main

# Docker
docker_users:
  - galaxy

# Autofs
usegalaxy_eu_autofs_mounts:
 - data
 - usrlocal

# Telegraf
custom_telegraf_env: "/usr/bin/env GDPR_MODE=1 PGUSER=galaxy PGHOST=sn03.bi.uni-freiburg.de GALAXY_ROOT=/opt/galaxy/server GALAXY_CONFIG_FILE=/opt/galaxy/config/galaxy.ini GALAXY_LOG_DIR=/var/log/galaxy/ GXADMIN_PYTHON=/opt/galaxy/venv/bin/python"
telegraf_agent_hostname: "sn06.galaxyproject.eu"
telegraf_plugins_extra:
  postgres:
    plugin: "postgresql"
    config:
      - address = "{{ galaxy_db_connection }}"
      - databases = ["galaxy", "galaxy-test", "apollo", "chado"]

  listen_galaxy_routes:
    plugin: "statsd"
    config:
      - service_address = ":8125"
      - percentiles = [90]
      - metric_separator = "."
      - allowed_pending_messages = 10000
      - percentile_limit = 100

  #monitor_condor_queue_split:
    #plugin: "exec"
    #config:
       ## TODO: sudoers rule?
      #- commands = ["sudo /usr/bin/monitor-condor-queue-split"]
      #- timeout = "10s"
      #- data_format = "influx"
      #- interval = "15s"

  monitor_condor_queue:
    plugin: "exec"
    config:
      - commands = ["sudo /usr/bin/monitor-condor-queue"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "1m"

  monitor_condor_util:
    plugin: "exec"
    config:
      - commands = ["sudo /usr/bin/monitor-condor-utilisation"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "1m"

  monitor_nfsstat:
    plugin: "exec"
    config:
      - commands = ["/usr/bin/nfsstat-influx"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "15s"

  # Some custom galaxy monitoring stuff
  galaxy_uploaded:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery upload-gb-in-past-hour"]
      - timeout = "60s"
      - data_format = "influx"
      - interval = "1h"
  galaxy_lastlog:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin uwsgi lastlog"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "15s"
  galaxy_jobs_queued:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery jobs-queued"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_jobs_queued_internal:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery jobs-queued-internal-by-handler"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_oidc:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery users-with-oidc"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_workflow:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery workflow-invocation-status"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_workflow_totals:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery workflow-invocation-totals"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_active_users:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin uwsgi active-users"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"

  postgres_extra:
    plugin: "exec"
    config:
      - commands = [
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-cache-hit",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-index-size",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-index-usage",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-table-bloat",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-table-size",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-unused-indexes",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-vacuum-stats",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-stat-bgwriter",
          "{{ custom_telegraf_env }} /usr/bin/gxadmin iquery pg-stat-user-tables",
        ]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"

# Custom pip installer
pip_venv_path: "{{ galaxy_venv_dir }}"
pip_install_dependencies:
    # phdcomics
    - beautifulsoup4
    # Used by code_files for apollo
    - biopython
    - bcbio-gff
    # Needed for tool watching
    - watchdog
    # Needed gxadmin graphs
    - data_hacks
    # for convenience
    - uwsgitop
    # used by reports
    - WeasyPrint


yum_exclude_repos:
    - condor*
    - npm*

all_yum_repositories:
  - name: galaxy_gpel
    description: Galaxy Packages for Enterprise Linux $releasever - $basearch
    baseurl: https://depot.galaxyproject.org/yum/el/$releasever/$basearch/
    enabled: yes
    gpgcheck: no
    retries: 1
    timeout: 10

# Galaxy monitoring
monitor_condor: true
monitor_condor_split_util: true


# Certbot
certbot_dns_provider: route53
certbot_auth_method: --standalone
certbot_domains: "{{ server_names }}"
certbot_post_renewal: |
    systemctl restart nginx || true
certbot_share_key_users:
    - nginx

# AWS Credentials for certbot-route53
aws_cli_credentials:
  - access_key: "{{ aws_credentials.certbot.AWS_ACCESS_KEY }}"
    secret_key: "{{ aws_credentials.certbot.AWS_SECRET_KEY }}"
    homedir: /root
    owner: root
    group: root

# rsync to nfs
galaxy_nfs_location: /data/gxnew

# Nginx
nginx_servers:
  - redirect-ssl
nginx_ssl_servers:
  - galaxyproject
  - telescope-ssl
  - galaxy-main
  - galaxy-ie-main
  - galaxy-test-proxy
nginx_conf_http:
  client_max_body_size: 1g
  proxy_cache_path: "/tmp/nginx-cache levels=1:2 keys_zone=STATIC:10m inactive=24h  max_size=1g"
  gzip: "on"
  gzip_proxied: any
  # The ngx_http_gzip_static_module module allows sending precompressed files with the “.gz” filename extension instead of regular files.
  gzip_static: "on"
  gzip_http_version: "1.1"
  gzip_disable: '"MSIE [1-6]\."'
  gzip_vary: "on"
  gzip_comp_level: 6
  gzip_types: |
      text/plain
      text/css
      text/xml
      text/javascript
      application/javascript
      application/x-javascript
      application/json
      application/xml
      application/xml+rss
      application/xhtml+xml
      application/x-font-ttf
      application/x-font-opentype
      image/png
      image/svg+xml
      image/x-icon
  gzip_buffers: "16 8k"
  gzip_min_length: 128
nginx_enable_default_server: false
nginx_flavor: "galaxy"

# Nginx Letsencrypt bindings
nginx_ssl_role: usegalaxy-eu.certbot
nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-nginx.pem

# Dynmotd
dynmotd_custom:
  - name: Condor
    command: "condor_q -totals | tail -n 1"

# CVMFS
cvmfs_role: client
galaxy_cvmfs_repos_enabled: config-repo

galaxy_cvmfs_server_urls:
  - domain: galaxyproject.org
    urls:
      - "http://cvmfs1-ufr0.galaxyproject.eu/cvmfs/@fqrn@"

# SystemD
galaxy_systemd_zerglings: 2
galaxy_systemd_handlers: 3
galaxy_systemd_workflow_schedulers: 3

galaxy_systemd_memory_limit: 20
galaxy_systemd_memory_limit_zp: 8
galaxy_systemd_memory_limit_handler: 12
galaxy_systemd_memory_limit_workflow: 15
galaxy_systemd_zergling_env: "TMP=/data/dnb01/galaxy_db/tmp-uwsgi TEMP=/data/dnb01/galaxy_db/tmp-uwsgi TMPDIR=/data/dnb01/galaxy_db/tmp-uwsgi GALAXY_WEBAPOLLO_URL={{ GALAXY_WEBAPOLLO_URL }} GALAXY_WEBAPOLLO_USER={{ GALAXY_WEBAPOLLO_USER }} GALAXY_WEBAPOLLO_PASSWORD={{ GALAXY_WEBAPOLLO_PASSWORD }} GALAXY_WEBAPOLLO_EXT_URL={{ GALAXY_WEBAPOLLO_EXT_URL }} GALAXY_SHARED_DIR={{ GALAXY_SHARED_DIR }}"
galaxy_systemd_handler_env: "GALAXY_WEBAPOLLO_URL={{ GALAXY_WEBAPOLLO_URL }} GALAXY_WEBAPOLLO_USER={{ GALAXY_WEBAPOLLO_USER }} GALAXY_WEBAPOLLO_PASSWORD={{ GALAXY_WEBAPOLLO_PASSWORD }} GALAXY_WEBAPOLLO_EXT_URL={{ GALAXY_WEBAPOLLO_EXT_URL }} GALAXY_SHARED_DIR={{ GALAXY_SHARED_DIR }}"
galaxy_systemd_workflow_scheduler_env: "{{ galaxy_systemd_handler_env }}"
galaxy_zergpool_listen_addr: "127.0.0.1:4001"
galaxy_zergpool_socket_name: zergpool.sock
galaxy_zergpool_listen_path: "{{ galaxy_mutable_data_dir }}/{{ galaxy_zergpool_socket_name }}"

# TODO: support yml?
galaxy_uwsgi_config_file_basename: uwsgi.ini
galaxy_systemd_zergling_uwsgi_config_file: "{{ galaxy_config_dir }}/uwsgi.ini"

# HTCondor
condor_host: "manager.vgcn.galaxyproject.eu"
condor_allow_write: "10.5.68.0/24, 10.19.0.0/16, 132.230.68.0/24, *.bi.uni-freiburg.de"
condor_daemons:
    - MASTER
    - SCHEDD
condor_allow_negotiator: "132.230.68.5,132.230.68.85,$(CONDOR_HOST)"
condor_allow_administrator: "$(ALLOW_NEGOTIATOR)"

condor_system_periodic_hold: "{{ 30 * 24 * 60 * 60}}"
condor_network_interface: ens2
condor_extra: ''

# gxadmin
postgres_user: galaxy
postgres_host: sn03.bi.uni-freiburg.de
postgres_port: 5432

# Slurp script
galaxy_slurper: galaxy
galaxy_slurp_influx_pass: "{{ influxdb.node.password }}"
galaxy_slurp_influx_user: "{{ influxdb.node.username }}"
galaxy_slurp_influx_url: "{{ influxdb.url }}"

# GRT
galaxy_grt_exporter: galaxy
galaxy_grt_uploader: galaxy

# Influx Notifier
gxadmin_influx_task_notifier: true
gxadmin_influx_task_notifier_db: notifications

# postgres_pass defined in secret_group_vars/all.yml
gxadmin_commit: master
gxadmin_dir: /opt/gxadmin
gxadmin_bin_dir: /usr/bin
gxadmin_force: true

# GALAXY
galaxy_group: galaxy
galaxy_system_group: galaxy
galaxy_instance_codename: "{{ codename }}"
galaxy_log_dir: '/var/log/galaxy/'
galaxy_layout: root-dir
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_build_client: false
galaxy_restart_handler_name: Restart Galaxy
galaxy_create_user: true
galaxy_user:
    name: galaxy
    create_home: true
    home: /opt/galaxy
    uid: 999
    shell: /bin/bash

galaxy_root: /opt/galaxy
galaxy_handler_count: "{{ galaxy_systemd_handlers }}"
galaxy_workflow_scheduler_count: "{{ galaxy_systemd_workflow_schedulers }}"
galaxy_host_codename: "{{ codename }}"
galaxy_home_dir: /opt/galaxy
galaxy_mutable_config_dir: "{{ galaxy_root }}/mutable-config"
galaxy_mutable_data_dir: "{{ galaxy_root }}/mutable-data"
galaxy_shed_tools_dir: "{{ galaxy_root }}/shed_tools"
__galaxy_shed_tools_dir: "{{ galaxy_shed_tools_dir }}"
galaxy_backup_configfiles: false

galaxy_server_dir: "{{ galaxy_root }}/server"
galaxy_config_dir: "{{ galaxy_root }}/config"
galaxy_venv_dir: "{{ galaxy_root  }}/venv"
galaxy_virtualenv_command: "pyvenv"
#galaxy_virtualenv_python: "python3.6"
galaxy_nonrepro_tools: "{{ galaxy_root }}/custom-tools"
galaxy_nonrepro_commit: master

galaxy_dynamic_job_rules_src_dir: files/galaxy/dynamic_rules
galaxy_dynamic_job_rules_dir: "{{ galaxy_root }}/dynamic_rules"
galaxy_dynamic_job_rules:
  - usegalaxy/joint_destinations.yaml
  - usegalaxy/sorting_hat.py
  - usegalaxy/destination_specifications.yaml
  - usegalaxy/blast_destinations.py
  - usegalaxy/tool_destinations.yaml
  - usegalaxy/dexseq.py
  - usegalaxy/wig2bigwig.py
  - readme.txt

# Custom override
# Our galaxy_tool_dependency_dir is on NFS, and permissions are set in such a
# way that they cannot be changed by the ansible connected user.
galaxy_dirs:
  - "{{ galaxy_mutable_data_dir }}"
  - "{{ galaxy_mutable_config_dir }}"
  - "{{ galaxy_cache_dir }}"
  - "{{ galaxy_shed_tools_dir }}"
  #- "{{ galaxy_tool_dependency_dir }}"
  - "{{ galaxy_file_path }}"
  - "{{ galaxy_job_working_directory }}"

galaxy_instance_hostname: usegalaxy.eu
galaxy_config_style: ini

galaxy_repo: 'https://github.com/usegalaxy-eu/galaxy.git'
galaxy_commit_id: 'release_20.09_europe'
galaxy_force_checkout: true # discard any modified files
#galaxy_admin_email_from: 'noreply@usegalaxy.eu'

galaxy_singularity_images_cvmfs_path: '/cvmfs/singularity.galaxyproject.org/all/'

# Job Conf

galaxy_jobconf:
    plugin_workers: 8
    handlers:
        count: "{{ galaxy_handler_count }}"
        assign_with: db-skip-locked
        max_grab: 8
    plugins:
        #- id: drmaa
          #load: galaxy.jobs.runners.drmaa:DRMAAJobRunner
          #workers: 3
        # These live on the pythonpath
        - id: dynamic
          params:
            rules_module: 'usegalaxy'
        - id: condor
          load: galaxy.jobs.runners.condor:CondorJobRunner
        - id: local
          load: galaxy.jobs.runners.local:LocalJobRunner
        - id: pulsar_embedded
          load: galaxy.jobs.runners.pulsar:PulsarEmbeddedJobRunner
        - id: pulsar_eu_cz
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_cz:{{ rabbitmq_password_galaxy_cz }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_cz?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: _default_
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_it01
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_it01:{{ rabbitmq_password_galaxy_it01 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_it01?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_it02
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_it02:{{ rabbitmq_password_galaxy_it02 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_it02?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_de01
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_de01:{{ rabbitmq_password_galaxy_de01 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_de01?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_de02
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_de02:{{ rabbitmq_password_galaxy_de02 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_de02?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_de03
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_de03:{{ rabbitmq_password_galaxy_de03 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_de03?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_pt01
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_pt01:{{ rabbitmq_password_galaxy_pt01 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_pt01?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_be01
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_be01:{{ rabbitmq_password_galaxy_be01 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_be01?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_uk01
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_uk01:{{ rabbitmq_password_galaxy_uk01 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_uk01?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_test
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_test:{{ rabbitmq_password_galaxy_test }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_test?ssl=1"
            galaxy_url: https://usegalaxy.eu
            manager: _default_
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_fr01
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_fr01:{{ rabbitmq_password_galaxy_fr01 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_fr01?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_fi01
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_fi01:{{ rabbitmq_password_galaxy_fi01 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_fi01?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_no01
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_no01:{{ rabbitmq_password_galaxy_no01 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_no01?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
        - id: pulsar_eu_es01
          load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
          params:
            amqp_url: "pyamqp://galaxy_es01:{{ rabbitmq_password_galaxy_es01 }}@proxy.internal.galaxyproject.eu:5671//pulsar/galaxy_es01?ssl=1"
            galaxy_url: "https://usegalaxy.eu"
            manager: production
            amqp_acknowledge: True
            amqp_ack_republish_time: 300
            amqp_consumer_timeout: 2.0
            amqp_publish_retry: True
            amqp_publish_retry_max_retries: 60
    default_destination: gateway_1x
    destinations:
        - id: local
          runner: local
        - id: condor
          runner: condor
          params:
            tmp_dir: "True"
        # Gateways
        - id: gateway_singlerun
          runner: dynamic
          params:
              type: python
              function: gateway
        - id: gateway_1x
          runner: dynamic
          params:
              type: python
              function: gateway_1x
        - id: gateway_1_5x
          runner: dynamic
          params:
              type: python
              function: gateway_1_5x
        - id: gateway_2x
          runner: dynamic
          params:
              type: python
              function: gateway_2x
        # Pulsar MQs
        - id: remote_cluster_mq_cz
          runner: pulsar_eu_cz
          params:
              jobs_directory: /storage/brno11-elixir/home/galaxyeu/galaxy-staging/
        - id: remote_cluster_mq_test
          runner: pulsar_eu_test
          env:
              LC_ALL: C
          params:
              jobs_directory: /data/share/staging
              transport: curl
              remote_metadata: "false"
              default_file_action: remote_transfer
              dependency_resolution: remote
              rewrite_parameters: "true"
              persistence_directory: /data/share/persisted_data
        - id: remote_cluster_mq_it01
          runner: pulsar_eu_it01
          env:
              LC_ALL: C
          params:
              jobs_directory: /data/share/staging
              transport: curl
              remote_metadata: "false"
              default_file_action: remote_transfer
              dependency_resolution: remote
              rewrite_parameters: "true"
              persistence_directory: /data/share/persisted_data
        - id: remote_cluster_mq_de01
          runner: pulsar_eu_de01
          env:
              LC_ALL: C
              SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
          params:
              jobs_directory: /data/share/staging
              transport: curl
              remote_metadata: "false"
              default_file_action: remote_transfer
              dependency_resolution: remote
              rewrite_parameters: "true"
              persistence_directory: /data/share/persisted_data
              singularity_enabled: "true"
              singularity_volumes: $defaults
        - id: remote_cluster_mq_de02
          runner: pulsar_eu_de02
          env:
              LC_ALL: C
          params:
              jobs_directory: /data/share/staging
              transport: curl
              remote_metadata: "false"
              default_file_action: remote_transfer
              dependency_resolution: remote
              rewrite_parameters: "true"
              persistence_directory: /data/share/persisted_data
        - id: remote_cluster_mq_de03
          runner: pulsar_eu_de03
          env:
              LC_ALL: C
          params:
              jobs_directory: /data/share/staging
              transport: curl
              remote_metadata: "false"
              default_file_action: remote_transfer
              dependency_resolution: remote
              rewrite_parameters: "true"
              persistence_directory: /data/share/persisted_data
        - id: remote_cluster_mq_docker_de03
          runner: pulsar_eu_de03
          env:
              LC_ALL: C
          params:
              jobs_directory: /data/share/staging
              transport: curl
              remote_metadata: "false"
              default_file_action: remote_transfer
              dependency_resolution: remote
              rewrite_parameters: "true"
              persistence_directory: /data/share/persisted_data
              docker_enabled: 'true'
              docker_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/share/staging/:ro'
              docker_default_container_id: 'ubuntu:18.04'
              docker_auto_rm: 'true'
              docker_sudo: 'false'
              docker_run_extra_arguments: '--gpus all'
              docker_set_user: ''
        - id: remote_cluster_mq_be01
          runner: pulsar_eu_be01
          env:
              LC_ALL: C
          params:
              jobs_directory: /data/share/staging
              transport: curl
              remote_metadata: "false"
              default_file_action: remote_transfer
              dependency_resolution: remote
              rewrite_parameters: "true"
              persistence_directory: /data/share/persisted_data
        - id: remote_cluster_mq_uk01
          runner: pulsar_eu_uk01
          env:
              LC_ALL: C
          params:
              jobs_directory: /data/share/staging
              transport: curl
              remote_metadata: "false"
              default_file_action: remote_transfer
              dependency_resolution: remote
              rewrite_parameters: "true"
              persistence_directory: /data/share/persisted_data
        - id: condor_singularity
          runner: condor
          params:
              singularity_enabled: 'true'
              singularity_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro'
              singularity_default_container_id: '/data/0/cvmfs/singularity/ubuntu:18.04'
        - id: condor_singularity2
          runner: condor
          params:
              singularity_enabled: 'true'
              singularity_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro'
              singularity_default_container_id: '/data/0/cvmfs/singularity/ubuntu:18.04'
          raw: |
            <param id="container">
                <container type="singularity" shell="/bin/sh" resolve_dependencies="true">/data/0/cvmfs/singularity/ubuntu:18.04</container>
            </param>
        - id: condor_singularity_with_conda
          runner: condor
          params:
              singularity_enabled: 'true'
              singularity_enabled: 'true'
              require_container: 'true'
              singularity_volumes: '/usr/local/tools/:ro,$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro,/data/dnb03/galaxy_db/:ro'        
              singularity_default_container_id: '/data/0/cvmfs/singularity/ubuntu:18.04'
          raw: |
            <param id="container">
                <container type="singularity" shell="/bin/bash" resolve_dependencies="true">/data/0/cvmfs/singularity/ubuntu:18.04</container>
            </param>
        - id: condor_docker
          runner: condor
          params:
            docker_enabled: 'true'
            docker_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro'
            docker_default_container_id: 'ubuntu:18.04'
            docker_auto_rm: 'true'
            docker_sudo: 'false'
            docker_set_user: ''
        - id: condor_docker_interactive
          runner: condor
          params:
            docker_enabled: 'true'
            docker_volumes: '$working_directory:rw,$job_directory:rw'
            docker_default_container_id: 'ubuntu:18.04'
            docker_auto_rm: 'true'
            docker_sudo: 'false'
            docker_set_user: ''
        - id: condor_docker_ie
          runner: condor
          params:
            docker_enabled: 'true'
            docker_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro'
            docker_default_container_id: 'ubuntu:18.04'
            docker_auto_rm: 'true'
            docker_sudo: 'false'
            docker_set_user: ''
        - id: condor_docker_ie_interactive
          runner: condor
          params:
            docker_enabled: 'true'
            docker_volumes: '$working_directory:rw,$job_directory:rw'
            docker_default_container_id: 'ubuntu:18.04'
            docker_auto_rm: 'true'
            docker_sudo: 'false'
            docker_set_user: ''
        # TODO(hxr): check functionality
        #- id: 24cores_15G_BLAST
        #  runner: dynamic
        #  params:
        #      type: python
        #      function: blast_destinations
        #- id: wig_to_bigWig
        #  runner: dynamic
        #  params:
        #      type: python
        #      function: wig_to_bigwig
        #- id: dexseq_dynamic
        #  runner: dynamic
        #  params:
        #      type: python
        #      function: dexseq
    tools:
        # TODO(hxr): implement validation that checks that every destination
        # used here is defined above.
        - id: upload1
          destination: gateway_singlerun
        #- id: wig_to_bigWig
          #destination: wig_to_bigWig
        #- id: dexseq
          #destination: dexseq_dynamic
        #- id: ncbi_blastn_wrapper
          #destination: 24cores_15G_BLAST
        #- id: ncbi_blastx_wrapper
          #destination: 24cores_15G_BLAST
        #- id: ncbi_tblastn_wrapper
          #destination: 24cores_15G_BLAST
        #- id: ncbi_tblastx_wrapper
          #destination: 24cores_15G_BLAST
        #- id: ncbi_blastp_wrapper
          #destination: 24cores_15G_BLAST
        #- id: ncbi_rpsblast_wrapper
          #destination: 24cores_15G_BLAST
    limits:
      - type: 'walltime'
        value: '148:00:00'
      - type: 'output_size'
        value: '300GB'
      - type: 'registered_user_concurrent_jobs'
        value: '4000'
      - type: 'anonymous_user_concurrent_jobs'
        value: '10'
      - type: 'destination_user_concurrent_jobs'
        id: 'sh_fdid_condor_docker_ie_interactive'
        value: '10'
      - type: 'destination_user_concurrent_jobs'
        id: 'sh_fdid_condor_intensive_jobs'
        value: '10'
      # We do not have a fixed name for a puslar endpoint, would that make sense?
      #- type: 'destination_user_concurrent_jobs'
      #  id: 'destination_name_of_pulsar_endpoint'
      #  value: '1000'

galaxy_config: "{{ galaxy_config_hash }}"

galaxy_config_file_src_dir: files/galaxy
galaxy_config_files:
  # TODO(bgruening): sync this with cvmfs? can we have ours be just a small additional builds.txt?
  - src: "{{ galaxy_config_file_src_dir }}/config/builds.txt"
    dest: "{{ galaxy_config['app:main']['builds_file_path'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/data_manager_conf.xml"
    dest: "{{ galaxy_config['app:main']['data_manager_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/datatypes_conf.xml"
    dest: "{{ galaxy_config['app:main']['datatypes_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/dependency_resolvers_conf.xml"
    dest: "{{ galaxy_config['app:main']['dependency_resolvers_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/disposable_email_blacklist.conf"
    dest: "{{ galaxy_config['app:main']['blacklist_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/user_preferences_extra_conf.yml"
    dest: "{{ galaxy_config['app:main']['user_preferences_extra_conf_path'] }}"
  # test? Unknown if this works.
  - src: "{{ galaxy_config_file_src_dir }}/config/file_sources_conf.yml"
    dest: "{{ galaxy_config_dir }}/__file_sources_conf.yml"
  - src: "{{ galaxy_config_file_src_dir }}/config/error_report.yml"
    dest: "{{ galaxy_config_dir }}/error_report.yml"
  - src: "{{ galaxy_config_file_src_dir }}/config/job_metrics_conf.xml"
    dest: "{{ galaxy_config['app:main']['job_metrics_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/migrated_tools_conf.xml"
    dest: "{{ galaxy_config['app:main']['migrated_tools_config'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/object_store_conf.xml"
    dest: "{{ galaxy_config['app:main']['object_store_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/tool_data_table_conf.xml"
    dest: "{{ galaxy_config_dir }}/tool_data_table_conf.xml"
  - src: "{{ galaxy_config_file_src_dir }}/config/tool_sheds_conf.xml"
    dest: "{{ galaxy_config['app:main']['tool_sheds_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/ucsc_build_sites.txt"
    dest: "{{ galaxy_config['app:main']['ucsc_build_sites'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/echo_main_env.xml"
    dest: "{{ galaxy_config_dir }}/echo_main_env.xml"

  #- src: files/galaxy/config/job_resource_params_conf.xml
    #dest: "{{ galaxy_config['app:main']['job_resource_params_file'] }}"
  #- src: files/galaxy/config/pulsar_stampede_actions.yml
    #dest: "{{ galaxy_config_dir }}/pulsar_stampede_actions.yml"
  #- src: files/galaxy/config/pulsar_bridges_actions.yml
    #dest: "{{ galaxy_config_dir }}/pulsar_bridges_actions.yml"
  #- src: files/galaxy/config/pulsar_jetstream.yml
    #dest: "{{ galaxy_config_dir }}/pulsar_jetstream.yml"
  #- src: files/galaxy/config/pulsar_jetstream_actions.yml
    #dest: "{{ galaxy_config_dir }}/pulsar_jetstream_actions.yml"

galaxy_config_template_src_dir: templates/galaxy
galaxy_config_templates:
  - src: "{{ galaxy_config_template_src_dir }}/config/build_sites.yml.j2"
    dest: "{{ galaxy_config['app:main']['build_sites_config_file'] }}"
  - src: "{{ galaxy_config_template_src_dir }}/config/global_host_filters.py.j2"
    dest: "{{ galaxy_server_dir }}/lib/galaxy/tools/toolbox/filters/global_host_filters.py"
  - src: "{{ galaxy_config_template_src_dir }}/config/job_conf.xml.j2"
    dest: "{{ galaxy_config_dir }}/job_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/container_resolvers_conf.xml.j2"
    dest: "{{ galaxy_config_dir }}/container_resolvers_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/user_filters.py.j2"
    dest: "{{ galaxy_server_dir }}/lib/galaxy/tools/toolbox/filters/user_filters.py"
  - src: "{{ galaxy_config_template_src_dir }}/config/uwsgi.ini.j2"
    dest: "{{ galaxy_config_dir }}/uwsgi.ini"
  - src: "{{ galaxy_config_template_src_dir }}/config/nagios_tool_conf.xml"
    dest: "{{ galaxy_config_dir }}/nagios_tool_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/oidc_backends_config.xml"
    dest: "{{ galaxy_config['app:main']['oidc_backends_config_file'] }}"
  - src: "{{ galaxy_config_template_src_dir }}/config/oidc_config.xml"
    dest: "{{ galaxy_config['app:main']['oidc_config_file'] }}"
  - src: "{{ galaxy_config_template_src_dir }}/config/grt.yml.j2"
    dest: "{{ galaxy_config_dir }}/grt.yml"
  - src: "{{ galaxy_config_template_src_dir }}/config/pulsar_app.yml"
    dest: "{{ galaxy_config_dir }}/pulsar_app.yml"
  - src: "{{ galaxy_config_template_src_dir }}/config/tool_conf.xml.j2"
    dest: "{{ galaxy_config_dir }}/tool_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/galaxy_workflow_scheduler.j2"
    dest: "{{ galaxy_config_dir }}/workflow_schedulers_conf.xml"
