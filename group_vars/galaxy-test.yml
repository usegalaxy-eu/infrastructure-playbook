---
# Docker
docker_users:
  - galaxy
docker_service_state: stopped
docker_service_enabled: false

# Autofs
autofs_service:
  install: true
  enable: true
nfs_kernel_tuning: true
autofs_mount_points:
  - data
  - gxtest
  - jwd
  - usrlocal

# Telegraf
custom_telegraf_env: "/usr/bin/env GDPR_MODE=1 PGUSER=galaxy PGHOST=sn05.galaxyproject.eu"
telegraf_agent_hostname: test.galaxyproject.eu
telegraf_plugins_extra:
  listen_galaxy_routes:
    plugin: "statsd"
    config:
      - service_address = ":8125"
      - percentiles = [90]
      - metric_separator = "."
      - allowed_pending_messages = 10000
      - percentile_limit = 100

  #monitor_condor_queue_split:
  #plugin: "exec"
  #config:
  ## TODO: sudoers rule?
  #- commands = ["sudo /usr/bin/monitor-condor-queue-split"]
  #- timeout = "10s"
  #- data_format = "influx"
  #- interval = "15s"

  monitor_condor_queue:
    plugin: "exec"
    config:
      - commands = ["sudo /usr/bin/monitor-condor-queue"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "1m"

  monitor_condor_util:
    plugin: "exec"
    config:
      - commands = ["sudo /usr/bin/monitor-condor-utilisation"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "1m"

  monitor_nfsstat:
    plugin: "exec"
    config:
      - commands = ["/usr/bin/nfsstat-influx"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "15s"

  # Some custom galaxy monitoring stuff
  galaxy_uploaded:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery upload-gb-in-past-hour"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1h"
  galaxy_lastlog:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin uwsgi lastlog"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "15s"
  galaxy_jobs_queued:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery jobs-queued"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_jobs_queued_internal:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery jobs-queued-internal-by-handler"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"
  galaxy_oidc:
    plugin: "exec"
    config:
      - commands = ["{{ custom_telegraf_env }} /usr/bin/gxadmin iquery users-with-oidc"]
      - timeout = "15s"
      - data_format = "influx"
      - interval = "1m"

# Custom pip installer
pip_venv_path: "{{ galaxy_venv_dir }}"
pip_install_dependencies:
  # phdcomics
  - beautifulsoup4
  # Used by code_files for apollo
  - biopython
  - bcbio-gff
  # Needed for tool watching
  - watchdog
  # Needed gxadmin graphs
  - data_hacks

yum_exclude_repos:
  - condor*
  - npm*

all_yum_repositories:
  - name: galaxy_gpel
    description: Galaxy Packages for Enterprise Linux $releasever - $basearch
    baseurl: https://depot.galaxyproject.org/yum/el/$releasever/$basearch/
    enabled: true
    gpgcheck: false
    retries: 1
    timeout: 10

# Galaxy monitoring
monitor_condor: true
monitor_condor_split_util: true

# rsync to nfs
galaxy_nfs_location: /data/gxtst

# Nginx
nginx_servers:
  - galaxy-test
  - galaxy-ie-test
nginx_ssl_servers: []
nginx_conf_http:
  client_max_body_size: 1g
  proxy_cache_path: "/tmp/nginx-cache levels=1:2 keys_zone=STATIC:10m inactive=24h  max_size=1g"
  gzip: "on"
  gzip_proxied: any
  # The ngx_http_gzip_static_module module allows sending precompressed files with the “.gz” filename extension instead of regular files.
  gzip_static: "on"
  gzip_http_version: "1.0"
  gzip_disable: "MSIE [1-6]\\."
  gzip_vary: "on"
  gzip_comp_level: 6
  gzip_types: |
    text/plain
    text/css
    text/xml
    text/javascript
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/xml+rss
    application/xhtml+xml
    application/x-font-ttf
    application/x-font-opentype
    image/png
    image/svg+xml
    image/x-icon
  gzip_buffers: "16 8k"
  gzip_min_length: 128
nginx_enable_default_server: false
nginx_flavor: ""

# Google Site Verification
google_site_verification_id: googlefb9521f583b7c8fe.html

# Dynmotd
dynmotd_custom:
  - name: Condor
    command: "condor_q -totals | tail -n 2"

# CVMFS
cvmfs_role: client
galaxy_cvmfs_repos_enabled: config-repo

#galaxy_cvmfs_server_urls:
#  - domain: galaxyproject.org
#    use_geoapi: true
#    urls:
#      - "http://cvmfs1-ufr0.galaxyproject.eu/cvmfs/@fqrn@"
#      - "http://galaxy.jrc.ec.europa.eu:8008/@fqrn@"

# SystemD
galaxy_systemd_mode: "gunicorn"
galaxy_systemd_gunicorn_workers: 2
galaxy_systemd_handlers: 2
galaxy_systemd_workflow_schedulers: 2
galaxy_systemd_memory_limit: 10
galaxy_systemd_gunicorn_env: "{{ apollo_env }}"
galaxy_systemd_handler_env: "{{ galaxy_systemd_gunicorn_env }}"
galaxy_systemd_workflow_scheduler_env: "{{ galaxy_systemd_gunicorn_env }}"

# HTCondor
condor_host: "condor-cm.galaxyproject.eu"
condor_allow_write: "10.5.68.0/24, 132.230.223.0/24"
condor_daemons:
  - MASTER
  - SCHEDD
condor_allow_negotiator: "132.230.223.239,$(CONDOR_HOST)"
condor_allow_administrator: "$(ALLOW_NEGOTIATOR)"

condor_system_periodic_hold: "{{ 30 * 24 * 60 * 60}}"
condor_network_interface: eth0
condor_extra: |
  SSH_TO_JOB_SSH_CMD = "ssh -oUser=galaxy -oIdentityFile=%i -oStrictHostKeyChecking=yes -oUserKnownHostsFile=%k -oGlobalKnownHostsFile=%k -oProxyCommand=%x %h"

# gie_proxy
gie_proxy_dir: "{{ galaxy_root }}/gie-proxy/proxy"
gie_proxy_git_version: main
gie_proxy_setup_nodejs: nodeenv
gie_proxy_virtualenv_command: /usr/bin/python3 -m virtualenv #"{{ pip_virtualenv_command }}"
gie_proxy_nodejs_version: "10.13.0"
gie_proxy_virtualenv: "{{ galaxy_root }}/gie-proxy/venv"
gie_proxy_setup_service: systemd
gie_proxy_sessions_path: "{{ galaxy_mutable_data_dir }}/interactivetools_map.sqlite"
gie_proxy_port: 8800
gie_proxy_verbose: true

# gxadmin
postgres_user: galaxy-test
postgres_host: sn05.galaxyproject.eu
postgres_port: 5432

# Slurp script
galaxy_slurper: galaxy
galaxy_slurp_influx_pass: "{{ influxdb.node.password }}"
galaxy_slurp_influx_user: "{{ influxdb.node.username }}"
galaxy_slurp_influx_url: "{{ influxdb.url }}"

# GRT
galaxy_grt_exporter: galaxy
galaxy_grt_uploader: galaxy

# Influx Notifier
gxadmin_influx_task_notifier: true
gxadmin_influx_task_notifier_db: notifications

# postgres_pass defined in secret_group_vars/all.yml
gxadmin_commit: main
gxadmin_dir: /opt/gxadmin
gxadmin_bin_dir: /usr/bin
gxadmin_force: true

# GALAXY
galaxy_system_group: galaxy
galaxy_log_dir: "/var/log/galaxy/"
galaxy_layout: root-dir
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_build_client: false
galaxy_restart_handler_name: Restart Galaxy
galaxy_create_user: true
galaxy_user:
  name: galaxy
  create_home: true
  home: /opt/galaxy
  uid: 999
  shell: /bin/bash
galaxy_group:
  name: galaxy
  gid: 999

# Galaxy configuration files will be written with these permissions (mode argument to Ansible copy/template module)
galaxy_config_perms: 0644

galaxy_root: /opt/galaxy
galaxy_workflow_scheduler_count: "{{ galaxy_systemd_workflow_schedulers }}"
galaxy_home_dir: /opt/galaxy
galaxy_mutable_config_dir: /opt/galaxy/mutable-config
galaxy_mutable_data_dir: /opt/galaxy/mutable-data
galaxy_shed_tools_dir: /opt/galaxy/shed_tools
galaxy_tool_data_path: "{{ galaxy_root }}/tool-data"
__galaxy_shed_tools_dir: "{{ galaxy_shed_tools_dir }}"
galaxy_backup_configfiles: false

galaxy_server_dir: "{{ galaxy_root }}/server"
galaxy_config_dir: "{{ galaxy_root }}/config"
galaxy_venv_dir: "{{ galaxy_root  }}/venv"
galaxy_virtualenv_command: "/usr/bin/python3.8 -m venv"
# galaxy_virtualenv_python: "python3.6"

galaxy_nonrepro_tools: /data/dnb01/galaxy_db/test/custom-tools
galaxy_nonrepro_commit: master

galaxy_dynamic_job_rules_src_dir: files/galaxy-test/dynamic_rules
galaxy_dynamic_job_rules_dir: "{{ galaxy_root }}/dynamic_rules"
galaxy_dynamic_job_rules:
  - usegalaxy/joint_destinations.yaml
  - usegalaxy/sorting_hat.py
  - usegalaxy/sorting_hat.yaml
  - usegalaxy/destination_specifications.yaml
  - usegalaxy/blast_destinations.py
  - usegalaxy/tool_destinations.yaml
  - usegalaxy/dexseq.py
  - usegalaxy/wig2bigwig.py
  - readme.txt

# Custom override
# Our galaxy_tool_dependency_dir is on NFS, and permissions are set in such a
# way that they cannot be changed by the ansible connected user.
galaxy_dirs:
  - "{{ galaxy_mutable_data_dir }}"
  - "{{ galaxy_mutable_config_dir }}"
  - "{{ galaxy_cache_dir }}"
  - "{{ galaxy_shed_tools_dir }}"
  #- "{{ galaxy_tool_dependency_dir }}"
  - "{{ galaxy_file_path }}"
  - "{{ galaxy_job_working_directory }}"
  - "{{ galaxy_tool_data_path }}"

galaxy_instance_hostname: usegalaxy.eu
galaxy_config_style: yaml

galaxy_repo: "https://github.com/usegalaxy-eu/galaxy.git"
galaxy_commit_id: "release_22.05_europe-test"
galaxy_force_checkout: true # discard any modified files
#galaxy_admin_email_from: 'noreply@usegalaxy.eu'

galaxy_singularity_images_cvmfs_path: "/cvmfs/singularity.galaxyproject.org/all/"

# Job Conf

galaxy_jobconf:
  plugin_workers: 8
  handlers:
    count: "{{ galaxy_systemd_handlers }}"
    assign_with: db-skip-locked
    max_grab: 4
  plugins:
    #- id: drmaa
    #load: galaxy.jobs.runners.drmaa:DRMAAJobRunner
    #workers: 3
    # These live on the pythonpath
    - id: dynamic
      params:
        rules_module: "usegalaxy"
    - id: condor
      load: galaxy.jobs.runners.condor:CondorJobRunner
    - id: local
      load: galaxy.jobs.runners.local:LocalJobRunner
    - id: pulsar_embedded
      load: galaxy.jobs.runners.pulsar:PulsarEmbeddedJobRunner
    - id: pulsar_eu_cz
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_cz:{{ rabbitmq_password_galaxy_cz }}@mq.galaxyproject.eu:5671//pulsar/galaxy_cz?ssl=1"
        galaxy_url: "https://usegalaxy.eu"
        manager: _default_
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_it01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_it01:{{ rabbitmq_password_galaxy_it01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_it01?ssl=1"
        galaxy_url: "https://test.usegalaxy.eu"
        manager: test
        amqp_acknowledge: true
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: true
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_de01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_de01:{{ rabbitmq_password_galaxy_de01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_de01?ssl=1"
        galaxy_url: "https://test.usegalaxy.eu"
        manager: test
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_de02
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_de02:{{ rabbitmq_password_galaxy_de02 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_de02?ssl=1"
        galaxy_url: "https://test.usegalaxy.eu"
        manager: test
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_de03
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_de03:{{ rabbitmq_password_galaxy_de03 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_de03?ssl=1"
        galaxy_url: "https://test.usegalaxy.eu"
        manager: test
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_pt01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_pt01:{{ rabbitmq_password_galaxy_pt01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_pt01?ssl=1"
        galaxy_url: "https://test.usegalaxy.eu"
        manager: test
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_uk01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_uk01:{{ rabbitmq_password_galaxy_uk01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_uk01?ssl=1"
        galaxy_url: "https://test.usegalaxy.eu"
        manager: test
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_eu_be01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_be01:{{ rabbitmq_password_galaxy_be01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_be01?ssl=1"
        galaxy_url: "https://test.usegalaxy.eu"
        manager: test
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
    - id: pulsar_au_au01
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      params:
        amqp_url: "pyamqp://galaxy_au01:{{ rabbitmq_password_galaxy_au01 }}@mq.galaxyproject.eu:5671//pulsar/galaxy_au01?ssl=1"
        galaxy_url: "https://test.usegalaxy.eu"
        manager: test
        amqp_acknowledge: "true"
        amqp_ack_republish_time: 300
        amqp_consumer_timeout: 2.0
        amqp_publish_retry: "true"
        amqp_publish_retry_max_retries: 60
  default_destination: gateway_singlerun
  destinations:
    - id: local
      runner: local
    - id: condor
      runner: condor
      params:
        tmp_dir: "True"
    # Gateways
    - id: gateway_singlerun
      runner: dynamic
      params:
        type: python
        function: gateway
    - id: gateway_1x
      runner: dynamic
      params:
        type: python
        function: gateway_1x
    - id: gateway_1_5x
      runner: dynamic
      params:
        type: python
        function: gateway_1_5x
    - id: gateway_2x
      runner: dynamic
      params:
        type: python
        function: gateway_2x
    # Pulsar MQs
    - id: remote_cluster_mq_cz
      runner: pulsar_eu_cz
      params:
        jobs_directory: /storage/brno11-elixir/home/galaxyeu/galaxy-staging/
    - id: remote_cluster_mq_test
      runner: pulsar_eu_test
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
    - id: static_remote_cluster_mq_it01
      runner: pulsar_eu_it01
      env:
        LC_ALL: C
      params:
        jobs_directory: /data/share/staging
        transport: curl
        remote_metadata: "false"
        default_file_action: remote_transfer
        dependency_resolution: remote
        rewrite_parameters: "true"
        persistence_directory: /data/share/persisted_data
        metadata_strategy: directory
    - id: condor_singularity
      runner: condor
      params:
        singularity_enabled: "true"
        singularity_volumes: "$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro"
        singularity_default_container_id: "/data/0/cvmfs/singularity/ubuntu:18.04"
    - id: condor_singularity2
      runner: condor
      params:
        singularity_enabled: "true"
        singularity_volumes: "$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro"
        singularity_default_container_id: "/data/0/cvmfs/singularity/ubuntu:18.04"
      raw: |
        <param id="container">
            <container type="singularity" shell="/bin/sh" resolve_dependencies="true">/data/0/cvmfs/singularity/ubuntu:18.04</container>
        </param>
    - id: condor_singularity_with_conda
      runner: condor
      params:
        singularity_enabled: "true"
      raw: |
        <param id="container">
            <container type="singularity" shell="/bin/bash" resolve_dependencies="true">/data/0/cvmfs/singularity/python:2.7.12--1</container>
        </param>
    - id: condor_docker
      runner: condor
      params:
        docker_enabled: "true"
        docker_volumes: "$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro"
        docker_default_container_id: "ubuntu:18.04"
        docker_auto_rm: "true"
        docker_sudo: "false"
        docker_set_user: ""
    # TODO(hxr): check functionality
    #- id: 24cores_15G_BLAST
    #  runner: dynamic
    #  params:
    #      type: python
    #      function: blast_destinations
    #- id: wig_to_bigWig
    #  runner: dynamic
    #  params:
    #      type: python
    #      function: wig_to_bigwig
    #- id: dexseq_dynamic
    #  runner: dynamic
    #  params:
    #      type: python
    #      function: dexseq
    # Embedded pulsar
    - id: secure_pulsar_singularity
      runner: pulsar_embedded
      params:
        remote_metadata: true
        singularity_enabled: true
  tools:
    # TODO(hxr): implement validation that checks that every destination
    # used here is defined above.
    - id: upload1
      destination: gateway_1x
    - id: toolshed.g2.bx.psu.edu/repos/devteam/samtools_stats/samtools_stats/2.0.2+galaxy2
      destination: static_remote_cluster_mq_it01
    - id: gmx_sim
      destination: gateway_singlerun
      resources: usegpu
    #- id: wig_to_bigWig
    #destination: wig_to_bigWig
    #- id: dexseq
    #destination: dexseq_dynamic
    #- id: ncbi_blastn_wrapper
    #destination: 24cores_15G_BLAST
    #- id: ncbi_blastx_wrapper
    #destination: 24cores_15G_BLAST
    #- id: ncbi_tblastn_wrapper
    #destination: 24cores_15G_BLAST
    #- id: ncbi_tblastx_wrapper
    #destination: 24cores_15G_BLAST
    #- id: ncbi_blastp_wrapper
    #destination: 24cores_15G_BLAST
    #- id: ncbi_rpsblast_wrapper
    #destination: 24cores_15G_BLAST
  resources:
    - id: usegpu
      names: gpu
  limits:
    - type: "walltime"
      value: "'148:00:00'"
    - type: "output_size"
      value: "'300GB'"
    - type: "registered_user_concurrent_jobs"
      value: "30"
    - type: "anonymous_user_concurrent_jobs"
      value: "10"
    - type: "destination_user_concurrent_jobs"
      id: "condor_test"
      value: "5"
    - type: "destination_total_concurrent_jobs"
      id: "condor_test"
      value: "100"

galaxy_config: "{{ galaxy_config_hash }}"

galaxy_config_file_src_dir: files/galaxy-test
galaxy_config_files:
  # TODO(bgruening): sync this with cvmfs? can we have ours be just a small additional builds.txt?
  - src: "{{ galaxy_config_file_src_dir }}/config/builds.txt"
    dest: "{{ galaxy_config['galaxy']['builds_file_path'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/data_manager_conf.xml"
    dest: "{{ galaxy_config['galaxy']['data_manager_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/datatypes_conf.xml"
    dest: "{{ galaxy_config['galaxy']['datatypes_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/dependency_resolvers_conf.xml"
    dest: "{{ galaxy_config['galaxy']['dependency_resolvers_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/disposable_email_blacklist.conf"
    dest: "{{ galaxy_config['galaxy']['email_domain_blocklist_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/user_preferences_extra_conf.yml"
    dest: "{{ galaxy_config['galaxy']['user_preferences_extra_conf_path'] }}"
  # test? Unknown if this works.
  - src: "{{ galaxy_config_file_src_dir }}/config/file_sources_conf.yml"
    dest: "{{ galaxy_config['galaxy']['file_sources_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/error_report.yml"
    dest: "{{ galaxy_config_dir }}/error_report.yml"
  - src: "{{ galaxy_config_file_src_dir }}/config/job_metrics_conf.xml"
    dest: "{{ galaxy_config['galaxy']['job_metrics_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/migrated_tools_conf.xml"
    dest: "{{ galaxy_config['galaxy']['migrated_tools_config'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/object_store_conf.xml"
    dest: "{{ galaxy_config['galaxy']['object_store_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/tool_data_table_conf.xml"
    dest: "{{ galaxy_config_dir }}/tool_data_table_conf.xml"
  - src: "{{ galaxy_config_file_src_dir }}/config/tool_sheds_conf.xml"
    dest: "{{ galaxy_config['galaxy']['tool_sheds_config_file'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/ucsc_build_sites.txt"
    dest: "{{ galaxy_config['galaxy']['ucsc_build_sites'] }}"
  - src: "{{ galaxy_config_file_src_dir }}/config/echo_main_env.xml"
    dest: "{{ galaxy_config_dir }}/echo_main_env.xml"

  #- src: files/galaxy/config/job_resource_params_conf.xml
  #dest: "{{ galaxy_config['galaxy']['job_resource_params_file'] }}"
  #- src: files/galaxy/config/pulsar_stampede_actions.yml
  #dest: "{{ galaxy_config_dir }}/pulsar_stampede_actions.yml"
  #- src: files/galaxy/config/pulsar_bridges_actions.yml
  #dest: "{{ galaxy_config_dir }}/pulsar_bridges_actions.yml"
  #- src: files/galaxy/config/pulsar_jetstream.yml
  #dest: "{{ galaxy_config_dir }}/pulsar_jetstream.yml"
  #- src: files/galaxy/config/pulsar_jetstream_actions.yml
  #dest: "{{ galaxy_config_dir }}/pulsar_jetstream_actions.yml"

galaxy_config_template_src_dir: templates/galaxy-test
galaxy_config_templates:
  - src: "{{ galaxy_config_template_src_dir }}/config/build_sites.yml.j2"
    dest: "{{ galaxy_config['galaxy']['build_sites_config_file'] }}"
  - src: "{{ galaxy_config_template_src_dir }}/config/global_host_filters.py.j2"
    dest: "{{ galaxy_server_dir }}/lib/galaxy/tool_util/toolbox/filters/global_host_filters.py"
  - src: "{{ galaxy_config_template_src_dir }}/config/job_conf.yml.j2"
    dest: "{{ galaxy_config_dir }}/job_conf.yml"
  - src: "{{ galaxy_config_template_src_dir }}/config/container_resolvers_conf.xml.j2"
    dest: "{{ galaxy_config_dir }}/container_resolvers_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/user_filters.py.j2"
    dest: "{{ galaxy_server_dir }}/lib/galaxy/tool_util/toolbox/filters/user_filters.py"
  - src: "{{ galaxy_config_template_src_dir }}/config/nagios_tool_conf.xml"
    dest: "{{ galaxy_config_dir }}/nagios_tool_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/oidc_backends_config.xml"
    dest: "{{ galaxy_config['galaxy']['oidc_backends_config_file'] }}"
  - src: "{{ galaxy_config_template_src_dir }}/config/oidc_config.xml"
    dest: "{{ galaxy_config['galaxy']['oidc_config_file'] }}"
  #- src: "{{ galaxy_config_template_src_dir }}/config/grt.yml.j2"
  #dest: "{{ galaxy_config_dir }}/grt.yml"
  - src: "{{ galaxy_config_template_src_dir }}/config/pulsar_app.yml"
    dest: "{{ galaxy_config_dir }}/pulsar_app.yml"
  - src: "{{ galaxy_config_template_src_dir }}/config/tool_conf.xml.j2"
    dest: "{{ galaxy_config_dir }}/tool_conf.xml"
  - src: "{{ galaxy_config_template_src_dir }}/config/galaxy_workflow_scheduler.j2"
    dest: "{{ galaxy_config_dir }}/workflow_schedulers_conf.xml"
