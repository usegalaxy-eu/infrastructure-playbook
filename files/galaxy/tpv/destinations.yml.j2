#jinja2: trim_blocks: True, lstrip_blocks: True
---
# NOTE: Use dashes (-) exclusively for tags and underscores (_) exclusively for destinations.
# submit_request_cpus its called in pulsar and in plain condor only request_cpus
destinations:
  ######################
  # BASIC DESTINATIONS #
  ######################
  basic_docker_destination:
    abstract: true
    params:
      docker_enabled: true
      docker_sudo: false
      docker_net: bridge
      docker_auto_rm: true
      docker_set_user: ""
      # $defaults expands to "$galaxy_root:ro,$tool_directory:ro,$job_directory:ro,$working_directory:rw,$default_file_path:rw"
      docker_volumes: "$_CONDOR_SCRATCH_DIR:rw,
        $defaults,
        {% for vol in dnb.values() %}
        {% if vol.name not in ['db', 'dnb04', 'dnb-ds01', '5'] %}
        {{ vol.path }}/galaxy_db/:{{ vol.docker_perm }},
        {% endif %}
        {% endfor %}
        {% for vol in cache.values() %}{% if 'cache' in vol.name %}
        {{ vol.path }}/object_store_cache/:{{ vol.docker_perm }},
        {% endif %}
        {% endfor %}
        {{ dnb.5.path }}/galaxy_import/galaxy_user_data/:{{ dnb.5.docker_perm }},
        {{ dnb.db.path }}/:{{ dnb.db.docker_perm }},
        {{ cvmfs.data.path }}:{{ cvmfs.data.docker_perm }}"
      require_container: true
      submit_request_cpus: "{cores}"
      submit_request_memory: "{mem}G"
      outputs_to_working_directory: false
      container_monitor_result: callback

  basic_singularity_destination:
    abstract: true
    params:
      submit_request_cpus: "{cores}"
      submit_request_memory: "{mem}G"
      singularity_enabled: true
      singularity_volumes: "$_CONDOR_SCRATCH_DIR:rw,
        $job_directory:rw,
        $tool_directory:ro,
        $job_directory/outputs:rw,
        $working_directory:rw,
        {% for vol in dnb.values() %}{% if vol.name not in ['5', 'dnb04', 'dnb-ds01', 'db'] %}
        {{ vol.path }}/galaxy_db/:{{ vol.docker_perm }},
        {% endif %}
        {% endfor %}
        {% for vol in cache.values() %}{% if 'cache' in vol.name %}
        {{ vol.path }}/object_store_cache/:{{ vol.docker_perm }},
        {% endif %}
        {% endfor %}
        {{ dnb.5.path }}/galaxy_import/galaxy_user_data/:{{ dnb.5.docker_perm }},
        {{ dnb.db.path }}/:{{ dnb.db.docker_perm }},
        {{ tools.tools.path }}/:{{ tools.tools.docker_perm }}"
      singularity_default_container_id: "{{ cvmfs.singularity.path }}/all/centos:8.3.2011"

  ################################
  # EMBEDDED PULSAR DESTINATIONS #
  ################################

  embedded_pulsar_docker_abstract:
    inherits: basic_docker_destination
    abstract: true
    runner: pulsar_embedded
    max_accepted_cores: 24
    max_accepted_mem: 128
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    params:
      docker_volumes: "$job_directory:rw,
        $_CONDOR_SCRATCH_DIR:rw,
        $tool_directory:ro,
        $job_directory/outputs:rw,
        $working_directory:rw,
        {{ cvmfs.data.path }}:{{ cvmfs.data.docker_perm }}"

  interactive_pulsar:
    inherits: embedded_pulsar_docker_abstract
    scheduling:
      accept:
        - docker
      require:
        - interactive

  interactive_pulsar_gpu:
    inherits: interactive_pulsar
    min_accepted_gpus: 1
    max_accepted_gpus: 1
    env:
      GPU_AVAILABLE: "1"
    params:
      requirements: 'GalaxyGroup == "compute_gpu"'

  interactive_pulsar_rstudio_poweruser:
    inherits: interactive_pulsar
    scheduling:
      require:
        - rstudio-poweruser

  embedded_pulsar_docker:
    inherits: embedded_pulsar_docker_abstract
    scheduling:
      require:
        - docker
        - embedded-pulsar

  embedded_pulsar_docker_gpu:
    inherits: embedded_pulsar_docker
    min_accepted_gpus: 1
    max_accepted_gpus: 1
    env:
      GPU_AVAILABLE: "1"
    params:
      requirements: 'GalaxyGroup == "compute_gpu"'

  #######################
  # PULSAR DESTINATIONS #
  #######################

  pulsar_default: # use for remote Pulsar nodes and ALWAYS overwrite the runner.
    abstract: true
    runner: pulsar_embedded
    env:
      LC_ALL: C
      SINGULARITY_CACHEDIR: /data/share/var/database/container_cache # On the NFS share on remote Pulsar side
    params:
      jobs_directory: /data/share/staging
      transport: curl
      remote_metadata: "false"
      metadata_strategy: directory
      default_file_action: remote_transfer
      rewrite_parameters: "true"
      persistence_directory: /data/share/persisted_data
      outputs_to_working_directory: "false"
      dependency_resolution: "none"
      submit_request_cpus: "{cores}"
      submit_request_memory: "{mem}G"
      docker_volumes: "$job_directory:rw,
        $tool_directory:ro,
        $job_directory/outputs:rw,
        $working_directory:rw,
        {{ cvmfs.data.path }}:{{ cvmfs.data.docker_perm }}"
      singularity_volumes: "$job_directory:rw,
        $tool_directory:ro,
        $job_directory/outputs:rw,
        $working_directory:rw,
        {{ cvmfs.data.path }}:{{ cvmfs.data.docker_perm }}"
      singularity_enabled: true
      singularity_default_container_id: "{{ cvmfs.singularity.path }}/all/centos:8.3.2011"
    scheduling:
      accept:
        - pulsar
        - conda
        - singularity
        - docker
        - condor-tpv

  pulsar_mira_tpv:
    inherits: pulsar_default
    runner: pulsar_mira_runner
    max_accepted_cores: 8
    max_accepted_mem: 15
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - mira-pulsar

  pulsar_sanjay_tpv:
    inherits: pulsar_default
    runner: pulsar_sanjay_runner
    max_accepted_cores: 8
    max_accepted_mem: 15
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    env:
      SINGULARITY_CACHEDIR: "/pulsar_data/container_cache"
    params:
      jobs_directory: "/pulsar_data/staging/ps02"
      persistence_directory: "/pulsar_data/persisted_data/ps02"
    scheduling:
      require:
        - sanjay-pulsar

  pulsar_sk01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_sk01
    max_accepted_cores: 8
    max_accepted_mem: 31
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - sk-pulsar

  pulsar_it_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_it01
    max_accepted_cores: 8
    max_accepted_mem: 31
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    params:
      singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro'
    env:
      TMP: $_GALAXY_JOB_TMP_DIR
      TEMP: $_GALAXY_JOB_TMP_DIR
      TMPDIR: $_GALAXY_JOB_TMP_DIR
    scheduling:
      require:
        - it-pulsar

  pulsar_it02_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_it02
    max_accepted_cores: 16
    max_accepted_mem: 31
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    params:
      singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro'
    env:
      TMP: $_GALAXY_JOB_TMP_DIR
      TEMP: $_GALAXY_JOB_TMP_DIR
      TMPDIR: $_GALAXY_JOB_TMP_DIR
    scheduling:
      require:
        - it02-pulsar

  pulsar_it03_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_it03
    max_accepted_cores: 32
    max_accepted_mem: 124
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    params:
      singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro'
    env:
      TMP: $_GALAXY_JOB_TMP_DIR
      TEMP: $_GALAXY_JOB_TMP_DIR
      TMPDIR: $_GALAXY_JOB_TMP_DIR
    scheduling:
      require:
        - it03-pulsar

  pulsar_fr01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_fr01
    max_accepted_cores: 8
    max_accepted_mem: 63
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    params:
      singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro'
    env:
      TMP: $_GALAXY_JOB_TMP_DIR
      TEMP: $_GALAXY_JOB_TMP_DIR
      TMPDIR: $_GALAXY_JOB_TMP_DIR
    scheduling:
      require:
        - fr-pulsar

  pulsar_be_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_be01
    max_accepted_cores: 8
    max_accepted_mem: 15
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - be-pulsar

  pulsar_cz01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_cz01
    max_accepted_cores: 32
    max_accepted_mem: 256
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    env:
      LC_ALL: C
      SINGULARITY_CACHEDIR: "/cvmfs/singularity.galaxyproject.org/all/"
      SINGULARITY_TMPDIR: "$SCRATCHDIR"
      TMPDIR: "$SCRATCHDIR"
      TMP: "$SCRATCHDIR"
      TEMP: "$SCRATCHDIR"
      XDG_CACHE_HOME: "$SCRATCHDIR"
    params:
      jobs_directory: "/storage/praha5-elixir/home/galaxyeu/pulsar-eu/files/staging"
      persistence_directory: "/opt/pulsar/files/persistent"
      singularity_volumes: "$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro,$SCRATCHDIR,/storage/praha5-elixir/home/galaxyeu:/home/galaxyeu,/cvmfs/data.galaxyproject.org/managed/:/data/db/data_managers/:ro"
      singularity_env__JAVA_OPTIONS: '-Xmx{int(mem)}g -Djava.io.tmpdir=$SCRATCHDIR'
#      singularity_run_extra_arguments: '--env _JAVA_OPTIONS=\"-Xmx{int(mem)}g -Djava.io.tmpdir=$SCRATCHDIR\"'
      submit_native_specification: "-l select=1:ncpus={int(cores)}:mem={int(mem)}gb:scratch_local=100gb -l walltime=24:00:00 -q galaxyeu@pbs-m1.metacentrum.cz -N pulsar_eu_j{job.id}__{tool.id if '/' not in tool.id else tool.id.split('/')[-2]+'_v'+tool.id.split('/')[-1]}__{user.username if user and hasattr(user, 'username') else 'anonymous'}"
    scheduling:
      require:
        - cz-pulsar
    rules:
      - if: tool.id.startswith("toolshed.g2.bx.psu.edu/repos/iuc/bakta/bakta") or tool.id.startswith("toolshed.g2.bx.psu.edu/repos/iuc/plasmidfinder/plasmidfinder")
        params:
          singularity_volumes: "$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro,$SCRATCHDIR,/storage/praha5-elixir/home/galaxyeu:/home/galaxyeu,/cvmfs/data.galaxyproject.org/byhand/:/data/db/data_managers/:ro"

  pulsar_cz02_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_cz01
    max_accepted_cores: 32
    max_accepted_mem: 256
    min_accepted_gpus: 1
    max_accepted_gpus: 1
    env:
      LC_ALL: C
      SINGULARITY_CACHEDIR: "/cvmfs/singularity.galaxyproject.org/all/"
      SINGULARITY_TMPDIR: "$SCRATCHDIR"
      TMPDIR: "$SCRATCHDIR"
      TMP: "$SCRATCHDIR"
      TEMP: "$SCRATCHDIR"
      MPLCONFIGDIR: "$SCRATCHDIR"
      ALPHAFOLD_DB: "/scratch.ssd/galaxyeu/permanent/alphafold.db"
      XDG_CACHE_HOME: "$SCRATCHDIR"
      GPU_AVAILABLE: "1"
    params:
      jobs_directory: "/storage/praha5-elixir/home/galaxyeu/pulsar-eu/files/staging"
      persistence_directory: "/opt/pulsar/files/persistent"
      singularity_volumes: "$job_directory:ro,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,$SCRATCHDIR,/storage/praha5-elixir/home/galaxyeu:/home/galaxyeu,$ALPHAFOLD_DB:/data:ro"
      singularity_run_extra_arguments: "--nv --env ALPHAFOLD_USE_GPU=True --env SCRATCHDIR=$SCRATCHDIR --env SCRATCH=$SCRATCHDIR"
      submit_native_specification: "-l select=1:ncpus=8:mem={int(mem)}gb:scratch_local=100gb:ngpus=1:gpu_mem=16gb -l walltime=24:00:00 -q galaxy_gpu@pbs-m1.metacentrum.cz -N pulsar_eu_j{job.id}__{tool.id if '/' not in tool.id else tool.id.split('/')[-2]+'_v'+tool.id.split('/')[-1]}__{user.username if user and hasattr(user, 'username') else 'anonymous'}"
    scheduling:
      require:
        - cz-pulsar
    rules:
      - if: tool.id.startswith("toolshed.g2.bx.psu.edu/repos/galaxy-australia/alphafold2/alphafold") and helpers.tool_version_gte(tool, "2.1.2+galaxy0") and helpers.tool_version_lt(tool, "2.3")
        env:
          ALPHAFOLD_DB: "/storage/brno11-elixir/projects/alphafold/alphafold.db-2.2"
      - if: tool.id.startswith("toolshed.g2.bx.psu.edu/repos/galaxy-australia/alphafold2/alphafold") and helpers.tool_version_gte(tool, "2.3.1+galaxy2")
        params:
          singularity_volumes: "$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,$SCRATCHDIR,/storage/praha5-elixir/home/galaxyeu:/home/galaxyeu,$ALPHAFOLD_DB:/data/2.3:ro"


  pulsar_egi01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_egi01
    max_accepted_cores: 8
    max_accepted_mem: 15
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - egi-pulsar

  pulsar_bsc01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_bsc01
    max_accepted_cores: 16
    max_accepted_mem: 64
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - bsc-pulsar

  pulsar_tubitak01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_tubitak01
    max_accepted_cores: 16
    max_accepted_mem: 95
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - tubitak-pulsar

  pulsar_cyf01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_cyf01
    max_accepted_cores: 4
    max_accepted_mem: 15
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - pl-pulsar

  pulsar_hcmr01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_hcmr01
    max_accepted_cores: 8
    max_accepted_mem: 30
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    env:
      TMP: $_GALAXY_JOB_TMP_DIR
      TEMP: $_GALAXY_JOB_TMP_DIR
      TMPDIR: $_GALAXY_JOB_TMP_DIR
    scheduling:
      require:
        - hcmr-gr-pulsar

  pulsar_eosc01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_eosc01
    max_accepted_cores: 4
    max_accepted_mem: 31
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - eosc-eu-node-01-pulsar

  pulsar_uca01_tpv:
    inherits: pulsar_default
    runner: pulsar_eu_uca01
    max_accepted_cores: 8
    max_accepted_mem: 31
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - uca-pulsar

  #############################
  # LOCAL CONDOR DESTINATIONS #
  #############################

  condor_docker:
    inherits: basic_docker_destination
    runner: condor
    max_accepted_cores: 36
    max_accepted_mem: 975
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      require:
        - docker

  condor_singularity:
    inherits: basic_singularity_destination
    runner: condor
    max_accepted_cores: 36
    max_accepted_mem: 975
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    params:
    scheduling:
      require:
        - singularity

  # Generic destination for tools that don't get any params
  # and no specified dependency resolution
  condor_tpv:
    runner: condor
    max_accepted_cores: 64
    max_accepted_mem: 1000
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    scheduling:
      prefer:
        - condor-tpv

  condor_singularity_with_conda:
    inherits: basic_singularity_destination
    runner: condor
    max_accepted_cores: 64
    max_accepted_mem: 1000
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    params:
      require_container: true
      container:
        - type: singularity
          shell: "/bin/bash"
          resolve_dependencies: true
          # Use Centos 7 as a fallback container here
          # Most times this fallback is needed for very old tools
          # Centos 7 has libncurses.so.5.9 and python 2.7
          identifier: "{{ misc.misc07.path }}/singularity_base_images/centos:7.9.2009"
    scheduling:
      require:
        - singularity
        - conda

  condor_upload:
    runner: condor
    max_accepted_cores: 20
    max_accepted_mem: 10
    min_accepted_gpus: 0
    max_accepted_gpus: 0
    params:
      requirements: "GalaxyTraining == false"
      rank: 'GalaxyGroup == "upload"'
    scheduling:
      require:
        - upload

  condor_gpu:
    runner: condor
    max_accepted_cores: 14
    max_accepted_mem: 37
    min_accepted_gpus: 1
    max_accepted_gpus: 1
    env:
      GPU_AVAILABLE: 1
    params:
      requirements: 'GalaxyGroup == "compute_gpu"'

  condor_docker_gpu:
    inherits: basic_docker_destination
    # shorter than inheriting from condor_gpu
    runner: condor
    max_accepted_cores: 14
    max_accepted_mem: 37
    min_accepted_gpus: 1
    max_accepted_gpus: 1
    scheduling:
      require:
        - docker
    env:
      GPU_AVAILABLE: 1
    params:
      requirements: 'GalaxyGroup == "compute_gpu"'

  condor_singularity_gpu:
    inherits: basic_singularity_destination
    # shorter than inheriting from condor_gpu
    runner: condor
    max_accepted_cores: 14
    max_accepted_mem: 37
    min_accepted_gpus: 1
    max_accepted_gpus: 1
    scheduling:
      require:
        - singularity
    env:
      GPU_AVAILABLE: 1
    params:
      requirements: 'GalaxyGroup == "compute_gpu"'
