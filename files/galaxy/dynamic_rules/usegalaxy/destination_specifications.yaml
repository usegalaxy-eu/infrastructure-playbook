---
condor:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 64
    mem: 1000
  env:
    NUMBA_CACHE_DIR: /data/2/galaxy_db/tmp
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyGroup == "compute"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'

# TBD
condor_extended:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 64
    mem: 1000
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyGroup == "compute"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'

# needs to be migrated, since we do not want to run upload jobs on celery
# will have a dedicated VGCN image with tag
condor_upload:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 20
    mem: 10
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
  params:
    priority: '{PRIORITY}'
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyTraining == false'
    rank: 'GalaxyGroup == "upload"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'

# can hopefully be removed, we run mothur now in docker and restrict it via limits
# needed because of this https://github.com/galaxyproject/tools-iuc/issues/3663
condor_mothur:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 64
    mem: 400
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyGroup == "compute_mothur"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'

# could be migrated, looks useful, but is not used
condor_gpu:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 16
    gpus: 1
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    GPU_AVAILABLE: 1
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyGroup == "compute_gpu"'
    request_gpus: '{GPUS}'
    tmp_dir: 'True'
    metadata_strategy: 'extended'

# should be migrated, is used by instagraal
condor_docker_gpu:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 16
    gpus: 1
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    GPU_AVAILABLE: 1
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyGroup == "compute_gpu"'
    request_gpus: '{GPUS}'
    tmp_dir: 'True'
    metadata_strategy: 'extended'
    docker_enabled: true
    # can and should be made stricter at some point
    docker_volumes: '$_CONDOR_SCRATCH_DIR:rw,$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro,/data/dnb03/galaxy_db/:ro,/data/dnb05/galaxy_db/:ro,/data/dnb06/galaxy_db/:rw,/data/dnb07/galaxy_db/:rw,/data/dnb08/galaxy_db/:rw,/data/dp01/galaxy_db/:rw,/data/0/galaxy_db/:ro,/data/1/galaxy_db/:ro,/data/2/galaxy_db/:ro,/data/3/galaxy_db/:ro,/data/4/galaxy_db/:ro,/data/5/galaxy_import/galaxy_user_data/:ro,/data/6/galaxy_db/:ro,/data/7/galaxy_db/:ro,/usr/local/tools/:ro'
    docker_memory: '{MEMORY}'
    docker_auto_rm: true
    docker_default_container_id: busybox:ubuntu-14.04
    docker_sudo: false
    docker_set_user: ''

# could be migrated is used in a handful of tools, but is not essential, tools could also run in Docker
# I would keep it for educational purpose and in case we want at some point prioritize Singularity above Docker
condor_singularity:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 64
    mem: 1000
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyGroup == "compute"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'
    singularity_enabled: true
    # can and should be made stricter at some point
    singularity_volumes: '$_CONDOR_SCRATCH_DIR:rw,$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro,/data/dnb03/galaxy_db/:ro,/data/dnb05/galaxy_db/:ro,/data/dnb06/galaxy_db/:rw,/data/dnb07/galaxy_db/:rw,/data/dnb08/galaxy_db/:rw,/data/dp01/galaxy_db/:rw,/data/0/galaxy_db/:ro,/data/1/galaxy_db/:ro,/data/2/galaxy_db/:ro,/data/3/galaxy_db/:ro,/data/4/galaxy_db/:ro,/data/5/galaxy_import/galaxy_user_data/:ro,/data/6/galaxy_db/:ro,/data/7/galaxy_db/:ro,/usr/local/tools/:ro'
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/all/centos:8.3.2011'

# not used, could go.
# interesting would be to derive this destination from the normal condor_singularity one
condor_singularity_with_gpu:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 18
    gpus: 1
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    request_gpus: '{GPUS}'
    dependency_resolution: 'none'
    require_container: true
    requirements: 'GalaxyGroup == "compute_gpu"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'
    singularity_enabled: true
    singularity_run_extra_arguments: '--nv'
    # can and should be made stricter at some point
    singularity_volumes: '$_CONDOR_SCRATCH_DIR:rw,$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro,/data/dnb03/galaxy_db/:ro,/data/dnb05/galaxy_db/:ro,/data/dnb06/galaxy_db/:rw,/data/dnb07/galaxy_db/:rw,/data/dnb08/galaxy_db/:rw,/data/dp01/galaxy_db/:rw,/data/0/galaxy_db/:ro,/data/1/galaxy_db/:ro,/data/2/galaxy_db/:ro,/data/3/galaxy_db/:ro,/data/4/galaxy_db/:ro,/data/5/galaxy_import/galaxy_user_data/:ro,/data/6/galaxy_db/:ro,/data/7/galaxy_db/:ro,/usr/local/tools/:ro'
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/all/centos:8.3.2011'

# I think we have this one already, can go. Not essential.
# This destination could be our default destination at some point instead of the conda one.
condor_singularity_with_conda:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 64
    mem: 1000
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyGroup == "compute"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'
    require_container: true
    singularity_enabled: true
    # can and should be made stricter at some point
    singularity_volumes: '$_CONDOR_SCRATCH_DIR:rw,$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/data/db/:ro,/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro,/data/dnb03/galaxy_db/:ro,/data/dnb05/galaxy_db/:ro,/data/dnb06/galaxy_db/:rw,/data/dnb07/galaxy_db/:rw,/data/dnb08/galaxy_db/:rw,/data/dp01/galaxy_db/:rw,/data/0/galaxy_db/:ro,/data/1/galaxy_db/:ro,/data/2/galaxy_db/:ro,/data/3/galaxy_db/:ro,/data/4/galaxy_db/:ro,/data/5/galaxy_import/galaxy_user_data/:ro,/data/6/galaxy_db/:ro,/data/7/galaxy_db/:ro,/usr/local/tools/:ro'
    container_override:
      - type: singularity
        shell: '/bin/bash'
        resolve_dependencies: true
        identifier: '/cvmfs/singularity.galaxyproject.org/all/centos:8.3.2011'

# can be dropped, all ITs are running via TPV already
condor_docker_ie:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 10
    mem: 50
  env: {}
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyDockerHack == True && GalaxyGroup == "interactive"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'
    docker_enabled: true
    # can and should be made stricter at some point
    docker_volumes: '/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro,/data/dnb03/galaxy_db/:ro,/data/dnb05/galaxy_db/:ro,/data/dnb06/galaxy_db/:rw,/data/dnb07/galaxy_db/:rw,/data/dnb08/galaxy_db/:rw,/data/dp01/galaxy_db/:rw,/data/0/galaxy_import/galaxy_user_data/:ro,/data/1/galaxy_import/galaxy_user_data/:ro,/data/2/galaxy_db/:ro,/data/3/galaxy_db/:ro,/data/4/galaxy_db/:ro,/data/5/galaxy_import/galaxy_user_data/:ro,/data/6/galaxy_db/:ro,/data/7/galaxy_db/:ro,$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro'
    docker_memory: '{MEMORY}'
    docker_auto_rm: true
    docker_default_container_id: busybox:ubuntu-14.04
    docker_sudo: false
    docker_set_user: ''

# can be dropped, all ITs are running via TPV already
condor_docker_ie_interactive:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 10
    mem: 50
  env: {}
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyDockerHack == True && GalaxyGroup == "interactive"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'
    docker_enabled: true
    # can and should be made stricter at some point
    docker_volumes: '$working_directory:rw,$job_directory:rw,$tool_directory:ro'
    docker_memory: '{MEMORY}'
    docker_auto_rm: true
    docker_default_container_id: busybox:ubuntu-14.04
    docker_sudo: false
    docker_set_user: ''

# can be dropped, all ITs are running via TPV already
condor_docker_ie_interactive_gpu:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 18
    gpus: 1
  env: {}
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    request_gpus: '{GPUS}'
    requirements: 'GalaxyDockerHack == True && GalaxyGroup == "compute_gpu"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'
    docker_enabled: true
    # can and should be made stricter at some point
    docker_volumes: '$working_directory:rw,$job_directory:rw,$tool_directory:ro'
    docker_memory: '{MEMORY}'
    docker_auto_rm: true
    docker_default_container_id: busybox:ubuntu-14.04
    docker_sudo: false
    docker_set_user: ''

# similar to condor_sigularity ... would be interesting to derive one from the other and just change the container engine.
condor_docker:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 40
    mem: 1000
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyDockerHack == True && GalaxyGroup == "compute"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'
    docker_enabled: true
    # can and should be made stricter at some point
    docker_volumes: '/data/dnb01/galaxy_db/:ro,/data/dnb02/galaxy_db/:ro,/data/dnb03/galaxy_db/:ro,/data/dnb05/galaxy_db/:ro,/data/dnb06/galaxy_db/:rw,/data/dnb07/galaxy_db/:rw,/data/dnb08/galaxy_db/:rw,/data/dp01/galaxy_db/:rw,/data/0/galaxy_import/galaxy_user_data/:ro,/data/1/galaxy_import/galaxy_user_data/:ro,/data/2/galaxy_db/:ro,/data/3/galaxy_db/:ro,/data/4/galaxy_db/:ro,/data/5/galaxy_import/galaxy_user_data/:ro,/data/6/galaxy_db/:ro,/data/7/galaxy_db/:ro,$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/db/:ro'
    docker_memory: '{MEMORY}'
    docker_auto_rm: true
    docker_default_container_id: busybox:ubuntu-14.04
    docker_sudo: false
    docker_set_user: ''

# drop
condor_docker_interactive:
  info:
    remote: false
    scheduler: 'condor'
  limits:
    cores: 40
    mem: 1000
  env:
    # this can be removed, as soon as we don't expose this env on cn029 anymore
    DOCKER_HOST: ''
  params:
    priority: -{PRIORITY}
    request_cpus: '{PARALLELISATION}'
    request_memory: '{MEMORY}'
    requirements: 'GalaxyDockerHack == True && GalaxyGroup == "interactive"'
    tmp_dir: 'True'
    metadata_strategy: 'extended'
    docker_enabled: true
    # can and should be made stricter at some point
    docker_volumes: '$working_directory:rw,$job_directory:rw,$tool_directory:ro'
    docker_memory: '{MEMORY}'
    docker_auto_rm: true
    docker_default_container_id: busybox:ubuntu-14.04
    docker_sudo: false
    docker_set_user: ''

# drop, we need a new stradegy for pulsar
remote_cluster_mq_it01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 16
    mem: 31
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'

# drop, we need a new stradegy for pulsar

remote_cluster_mq_be01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 15
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
  params:
    priority: -{PRIORITY}
    submit_submit_request_cpus: '{PARALLELISATION}'
    submit_submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    dependency_resolution: 'remote'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_de01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 16
    mem: 31
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'
    singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_singularity_2wdtrue_de01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 16
    mem: 31
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: true
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'
    singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_docker_de01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 16
    mem: 31
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'remote'
    docker_enabled: true
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    docker_volumes: '$job_directory:ro,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw'
    docker_memory: '{MEMORY}'
    docker_auto_rm: true
    docker_default_container_id: busybox:glibc
    docker_sudo: false
    docker_set_user: ''
    tmp_dir: 'True'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_de02:
  ## our singularity test bed
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 16
    mem: 31
  env: {}
  params:
    priority: -{PRIORITY}
    submit_submit_request_cpus: '{PARALLELISATION}'
    submit_submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    # dependency_resolution: 'remote'  --> we should enable it and test the difference, I don't think it has an effect
    singularity_enabled: true
    singularity_default_container_id: '/data/0/singularity/ubuntu:18.04'
    tmp_dir: 'True'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_de03:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 19
    gpus: 1
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    submit_request_gpus: '{GPUS}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'remote'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_docker_de03:
  info:
    remote: true
    scheduler: 'condor'
  nodes: 18
  limits:
    cores: 8
    mem: 19
    gpus: 1
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    submit_request_gpus: '{GPUS}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'remote'
    docker_enabled: true
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    # can and should be made stricter at some point
    docker_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/share/staging/:ro'
    docker_memory: '{MEMORY}'
    docker_auto_rm: true
    docker_default_container_id: busybox:ubuntu-14.04
    docker_sudo: false
    docker_set_user: ''
    docker_run_extra_arguments: '--gpus all'
    tmp_dir: 'True'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_pt01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 4
    mem: 15
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'remote'
    outputs_to_working_directory: true
    rewrite_parameters: true
    transport: 'curl'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_uk01:
  info:
    remote: true
    scheduler: 'condor'
  nodes: 40
  limits:
    cores: 60
    mem: 300
    gpus: 1
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    GPU_AVAILABLE: 1
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    submit_request_gpus: '{GPUS}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'remote'
    outputs_to_working_directory: true
    rewrite_parameters: true
    transport: 'curl'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_singularity_uk01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 60
    mem: 300
    gpus: 1
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    GPU_AVAILABLE: 1
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    submit_request_gpus: '{GPUS}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_docker_uk01:
  info:
    remote: true
    scheduler: 'condor'
  nodes: 40
  limits:
    cores: 60
    mem: 300
    gpus: 1
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    GPU_AVAILABLE: 1
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    submit_request_gpus: '{GPUS}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    docker_enabled: true
 # can and should be made stricter at some point
    docker_volumes: '$galaxy_root:ro,$tool_directory:ro,$working_directory:rw,$job_directory:rw,/data/share/staging/:ro'
    docker_memory: '{MEMORY}'
    docker_auto_rm: true
    docker_default_container_id: busybox:glibc
    docker_sudo: false
    docker_set_user: ''
    docker_run_extra_arguments: '--gpus all'
    tmp_dir: 'True'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_it02:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 4
    mem: 30
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'
    singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_2wdfalse_it03:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 15
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'
    singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw'

# drop, we need a new stradegy for pulsar
# THIS IS NOT WORKING, DO NOT set `outputs_to_working_directory=True`
remote_cluster_mq_2wdtrue_it03:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 15
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: true
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'
    singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_fr01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 15
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_fi01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 8
    mem: 31
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_no01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 4
    mem: 15
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: true
    rewrite_parameters: true
    transport: 'curl'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_es01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 4
    mem: 16
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /data/share/var/database/container_cache
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/data/share/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: false
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/cvmfs/singularity.galaxyproject.org/u/b/ubuntu:18.04'
    singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw'

# drop, we need a new stradegy for pulsar
remote_cluster_mq_cz01:
  info:
    remote: true
    scheduler: 'condor'
  limits:
    cores: 4
    mem: 16
  env:
    GALAXY_MEMORY_MB: '{MEMORY_MB}'
    GALAXY_SLOTS: '{PARALLELISATION}'
    LC_ALL: C
    SINGULARITY_CACHEDIR: /storage/praha5-elixir/home/galaxyeu/pulsar/singularity_cache
    SINGULARITY_TMPDIR: $SCRATCHDIR
    TMPDIR: $SCRATCHDIR
    TMP: $SCRATCHDIR
    TEMP: $SCRATCHDIR
  params:
    priority: -{PRIORITY}
    submit_request_cpus: '{PARALLELISATION}'
    submit_request_memory: '{MEMORY}'
    jobs_directory: '/storage/praha5-elixir/home/galaxyeu/pulsar/files/staging'
    default_file_action: 'remote_transfer'
    dependency_resolution: 'none'
    outputs_to_working_directory: true
    rewrite_parameters: true
    transport: 'curl'
    singularity_enabled: true
    singularity_default_container_id: '/storage/praha5-elixir/home/galaxyeu/pulsar/ubuntu_20.04'
    singularity_volumes: '$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw'
